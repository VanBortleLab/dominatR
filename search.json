[{"path":"https://vanbortlelab.github.io/dominatR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 dominatR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Calculating Entropy and Center of Mass","text":"data used article comes two different sources: SummarizedExperiment object library airway data.frame retrieved supplementary library dominatRData purpose using two different sources meant show capacity dominatR process different objects. context information theory, entropy (Shannon Entropy) metric used measure uncertainty associated set variables. ‚Äôs value ranges 0 ùëôùëúùëî(ùëÅ), N total number variables accounted . interpretation straightforward: observation high entropy values uncertain, observation expected occur high probability level, across variables. example, Gene expressed variables levels high entropy value. observation low entropy values uncertain, observation expected occur high probability level, set variables. example, Gene B expressed variable variable B rest tissues low entropy value. Entropy calculated using following formula: H(X)=‚àí‚àëp(x)*log2(p(x))H(X) = -‚àë p(x) * log2(p(x)) p(x)p(x) equal relative levels gene (g) specific variable (t). formula, possible measure categorical tissue specificity defined : Q(g|t)=H(X)‚àílog2(p(x))Q_{(g|t)} = H(X) - log2(p(x)) formula specifies ‚Äòdomination‚Äô value specific gene specific tissue. Therefore low values Q(g|t)Q_{(g|t)} occurs gene observation mostly present small subset tissues. physics, center mass way summarize quantity (typically mass) distributed across space. represents unique point weighted average positions, relative associated weights, balances . weights wi‚â•0w_i \\ge 0 coordinates ri{r}_i‚Äã, CoM CoM=‚àë‚Äãwi‚Äãri‚àë‚Äãwi‚Äã‚Äã‚ÄãCoM=\\frac{‚àë_i‚Äãw_i‚Äãr_i}{‚àë_i‚Äãw_i}‚Äã‚Äã‚Äã. context package, weights sample-level measurements (e.g gene expression) positions user defined coordinates assigned samples (three dimensions). CoM summarizes observation positioned coordinate system. interpretation follows: observation dominated one sample, located near sample‚Äôs coordinate. observation uniformly distributed across samples, located near geometric center sample coordinates. package provides formulas useful calculate Entropy H(X)H(X), ‚ÄòCategorical‚Äô Entropy Q(g|t)Q_{(g|t)} Center Mass CoMCoM: entropy() Qentropy() centmass()","code":"### summarized experiment data(\"airway\") se <-airway  # Only use a random subset of 500 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(500, nrow(se))) se <- se[idx, ]   # dataframe data(\"rnapol_score\") df1 = rnapol_score  data(\"atac_tissue_score\") df2 = atac_tissue_score"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"center-of-mass","dir":"Articles","previous_headings":"Data","what":"Center of Mass","title":"Calculating Entropy and Center of Mass","text":"Center mass useful using 3 dimensions given 3 dimensions representable bidimensional plane. function requires specification set coordinates, default, function uses x_coord = c(0, 1, 0.5) y_coord = c(0, 0, sqrt(3)/2), correspond equilateral triangle. function returns pair coordinates x y observation representing spatial location CoM data frame extra columns rowData() SummarizedExperiment used.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"example-1-a-data-frame","dir":"Articles","previous_headings":"Data > Center of Mass","what":"Example 1: A data.frame","title":"Calculating Entropy and Center of Mass","text":"","code":"df = df1 ## calculating center of mass in the numerical functions df = centmass(df[,5:7]) head(df) #>        comx       comy #> 1 0.1022727 0.05248639 #> 2 0.4998737 0.86580669 #> 3 0.1439394 0.00000000 #> 4 0.5002817 0.86510373 #> 5 0.4962568 0.85851978 #> 6 0.4982841 0.85948712"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"example-2-a-summarized-experiment","dir":"Articles","previous_headings":"Data > Center of Mass","what":"Example 2: A summarized Experiment","title":"Calculating Entropy and Center of Mass","text":"","code":"# Subsetting 3 columns se2 = se[,1:3] se2 <- centmass(se2)  head(rowData(se2)) #> DataFrame with 6 rows and 12 columns #>                         gene_id      gene_name  entrezid   gene_biotype #>                     <character>    <character> <integer>    <character> #> ENSG00000260166 ENSG00000260166  RP11-863P13.6        NA        lincRNA #> ENSG00000266931 ENSG00000266931 RP11-1252D15.1        NA     pseudogene #> ENSG00000104774 ENSG00000104774         MAN2B1        NA protein_coding #> ENSG00000267583 ENSG00000267583  RP11-322E11.5        NA        lincRNA #> ENSG00000227581 ENSG00000227581   RP13-140E4.1        NA     pseudogene #> ENSG00000227317 ENSG00000227317          DDAH2        NA protein_coding #>                 gene_seq_start gene_seq_end       seq_name seq_strand #>                      <integer>    <integer>    <character>  <integer> #> ENSG00000260166       88120993     88121538             16          1 #> ENSG00000266931       87282781     87282923              2         -1 #> ENSG00000104774       12757325     12777556             19         -1 #> ENSG00000267583       33023833     33047052             18         -1 #> ENSG00000227581       89294212     89294833              X         -1 #> ENSG00000227317       31676987     31680566 HSCHR6_MHC_DBB         -1 #>                 seq_coord_system         symbol      comx      comy #>                        <integer>    <character> <numeric> <numeric> #> ENSG00000260166               NA  RP11-863P13.6  0.000000  0.000000 #> ENSG00000266931               NA RP11-1252D15.1  0.000000  0.000000 #> ENSG00000104774               NA         MAN2B1  0.497312  0.323613 #> ENSG00000267583               NA  RP11-322E11.5  1.000000  0.000000 #> ENSG00000227581               NA   RP13-140E4.1  0.000000  0.000000 #> ENSG00000227317               NA          DDAH2  0.000000  0.000000"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"entropy","dir":"Articles","previous_headings":"Data","what":"Entropy","title":"Calculating Entropy and Center of Mass","text":"Entropy offers benefit calculating levels surprise observation across N-Variables. function transforms data frame proportions adds column name Entropy. Nevertheless, using SummarizedExperiment object, option user store proportions new assay adds column name Entropy rowdata().","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"example-1-a-data-frame-1","dir":"Articles","previous_headings":"Data > Entropy","what":"Example 1: A data.frame","title":"Calculating Entropy and Center of Mass","text":"","code":"df = df1 df = entropy(df) head(df) #>    Chr     Start      Stop RNA_type         pol1         pol2         pol3 #> 1 chr1 0.4999965 0.5000034     tRNA 7.835873e-08 6.501380e-09 5.474846e-09 #> 2 chr1 0.4999952 0.5000012     tRNA 9.079536e-10 0.000000e+00 3.594286e-06 #> 3 chr1 0.4999970 0.5000030     tRNA 3.417090e-08 5.745550e-09 0.000000e+00 #> 4 chr1 0.4999921 0.4999982     tRNA 2.419044e-09 7.861892e-09 9.649868e-06 #> 5 chr1 0.4999921 0.4999982     tRNA 7.856825e-08 5.741526e-09 9.643649e-06 #> 6 chr1 0.4999959 0.5000019     tRNA 1.208625e-08 4.532346e-09 2.184591e-06 #>    Entropy #> 1 1.000002 #> 2 1.000067 #> 3 1.000001 #> 4 1.000165 #> 5 1.000167 #> 6 1.000042"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"example-2-a-summarized-experiment-1","dir":"Articles","previous_headings":"Data > Entropy","what":"Example 2: A summarized Experiment","title":"Calculating Entropy and Center of Mass","text":"","code":"# Subsetting 3 columns se2 = se se2 <- entropy(se2, new_assay_name = 'Entropy')  head(rowData(se2)) #> DataFrame with 6 rows and 11 columns #>                         gene_id      gene_name  entrezid   gene_biotype #>                     <character>    <character> <integer>    <character> #> ENSG00000260166 ENSG00000260166  RP11-863P13.6        NA        lincRNA #> ENSG00000266931 ENSG00000266931 RP11-1252D15.1        NA     pseudogene #> ENSG00000104774 ENSG00000104774         MAN2B1        NA protein_coding #> ENSG00000267583 ENSG00000267583  RP11-322E11.5        NA        lincRNA #> ENSG00000227581 ENSG00000227581   RP13-140E4.1        NA     pseudogene #> ENSG00000227317 ENSG00000227317          DDAH2        NA protein_coding #>                 gene_seq_start gene_seq_end       seq_name seq_strand #>                      <integer>    <integer>    <character>  <integer> #> ENSG00000260166       88120993     88121538             16          1 #> ENSG00000266931       87282781     87282923              2         -1 #> ENSG00000104774       12757325     12777556             19         -1 #> ENSG00000267583       33023833     33047052             18         -1 #> ENSG00000227581       89294212     89294833              X         -1 #> ENSG00000227317       31676987     31680566 HSCHR6_MHC_DBB         -1 #>                 seq_coord_system         symbol   Entropy #>                        <integer>    <character> <numeric> #> ENSG00000260166               NA  RP11-863P13.6  0.000000 #> ENSG00000266931               NA RP11-1252D15.1  0.000000 #> ENSG00000104774               NA         MAN2B1  2.979167 #> ENSG00000267583               NA  RP11-322E11.5  0.000000 #> ENSG00000227581               NA   RP13-140E4.1  0.918296 #> ENSG00000227317               NA          DDAH2  0.000000"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"categorical-entropy","dir":"Articles","previous_headings":"Data","what":"Categorical Entropy","title":"Calculating Entropy and Center of Mass","text":"calculating Categorical Entropy, required compute first Entropy dataset interest. object dataframe, Entropy transformed dataframe subsequently transformed. object SummarizedExperiment, dataset can stored new assay.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"example-1-a-data-frame-2","dir":"Articles","previous_headings":"Data > Categorical Entropy","what":"Example 1: A data.frame","title":"Calculating Entropy and Center of Mass","text":"dataframe, possible observe obserations gene_9363, gene_1112, gene_2850 low values Qentropy emphasizing high score normalized features Heart compared samples.","code":"df = df2  df = entropy(df) df = Qentropy(df) head(df[order(df$Heart),]) #>        core_type   Chr     Start       End #> 9363    Specific  chr1 151022749 151022852 #> 1112    Specific  chr4 155464005 155465338 #> 2850    Specific  chr1 237945359 237946320 #> 8751    Specific chr19  45427468  45427615 #> 4324 25% Tissues  chr9  33657848  33659206 #> 9799 25% Tissues chr21   8253841   8255704 #>                                              Gene  Index     Type    Heart #> 9363                 U6_snRNA_URS00006B5505&&9098   9098   u6 RNA 2.000000 #> 1112 LSU_rRNA_bacteria_rRNA_URS0000994EE4&&122489 122489 LSU rRNA 3.169925 #> 2850  SSU_rRNA_bacteria_rRNA_URS000096E89F&&14540  14540 SSU rRNA 4.000000 #> 8751     Metazoa_SRP_SRP_RNA_URS00009442C9&&78677  78677      SRP 4.643856 #> 4324 LSU_rRNA_bacteria_rRNA_URS00009A7234&&163885 163885 LSU rRNA 5.169925 #> 9799   SSU_rRNA_eukarya_rRNA_URS0000ABD7D5&&99559  99559 SSU rRNA 5.169925 #>      Spleen    Liver    Colon Adrenal.Gland Lung Pancreas Gallbladder #> 9363    Inf      Inf      Inf           Inf  Inf      Inf         Inf #> 1112    Inf 3.169925      Inf      3.169925  Inf      Inf         Inf #> 2850    Inf      Inf 4.000000           Inf  Inf      Inf         Inf #> 8751    Inf      Inf      Inf           Inf  Inf      Inf         Inf #> 4324    Inf      Inf 5.169925      5.169925  Inf      Inf         Inf #> 9799    Inf      Inf      Inf           Inf  Inf 5.169925         Inf #>      Urinary.Tract   Breast Fallopian.Tube Psoas.Muscle Vena.Cava #> 9363           Inf      Inf            Inf     2.000000       Inf #> 1112           Inf      Inf            Inf          Inf       Inf #> 2850           Inf 4.000000            Inf          Inf       Inf #> 8751           Inf      Inf            Inf          Inf  4.643856 #> 4324      5.169925 5.169925            Inf          Inf       Inf #> 9799           Inf      Inf            Inf     5.169925  5.169925 #>      Gastroesophageal.Sphincter Adipose.Tissue Sciatic.Nerve Ovary...Uterus #> 9363                        Inf            Inf           Inf            Inf #> 1112                        Inf            Inf           Inf            Inf #> 2850                        Inf            Inf           Inf            Inf #> 8751                        Inf       4.643856      4.643856       4.643856 #> 4324                        Inf       5.169925           Inf            Inf #> 9799                        Inf            Inf      5.169925            Inf #>      Stomach    Brain #> 9363     Inf      Inf #> 1112     Inf      Inf #> 2850       4      Inf #> 8751     Inf      Inf #> 4324     Inf      Inf #> 9799     Inf 5.169925"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"example-2-a-summarized-experiment-2","dir":"Articles","previous_headings":"Data > Categorical Entropy","what":"Example 2: A summarized Experiment","title":"Calculating Entropy and Center of Mass","text":"","code":"# Subsetting 3 columns se2 = se se2 <- entropy(se2, new_assay_name = 'Entropy') se2 <- Qentropy(se2, assay_name = 'Entropy', new_assay_name = 'Qentropy')  head(assay(se2, 'Qentropy')) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166        Inf        Inf        Inf        Inf        Inf #> ENSG00000266931        Inf        Inf        Inf        Inf        Inf #> ENSG00000104774   5.954307   5.979072   5.711755   6.640587   6.005811 #> ENSG00000267583        Inf   0.000000        Inf        Inf        Inf #> ENSG00000227581   2.503258        Inf        Inf        Inf        Inf #> ENSG00000227317        Inf        Inf        Inf        Inf        Inf #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000260166        Inf   0.000000        Inf #> ENSG00000266931        Inf        Inf        Inf #> ENSG00000104774   5.732659   6.049651   5.941714 #> ENSG00000267583        Inf        Inf        Inf #> ENSG00000227581   1.503258        Inf        Inf #> ENSG00000227317        Inf        Inf        Inf"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Calculating-Entropy-and-Center-of-Mass.html","id":"session-info","dir":"Articles","previous_headings":"Data > Categorical Entropy","what":"Session Info","title":"Calculating Entropy and Center of Mass","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.5.2               dominatRData_0.99.0         #>  [3] airway_1.28.0               SummarizedExperiment_1.38.1 #>  [5] Biobase_2.68.0              GenomicRanges_1.60.0        #>  [7] GenomeInfoDb_1.44.2         IRanges_2.42.0              #>  [9] S4Vectors_0.46.0            BiocGenerics_0.54.0         #> [11] generics_0.1.4              MatrixGenerics_1.20.0       #> [13] matrixStats_1.5.0           dominatR_0.99.0             #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6            xfun_0.53               bslib_0.9.0             #>  [4] lattice_0.22-7          tzdb_0.5.0              vctrs_0.6.5             #>  [7] tools_4.5.1             tibble_3.3.0            pkgconfig_2.0.3         #> [10] Matrix_1.7-3            tidyverse_2.0.0         ggnewscale_0.5.2        #> [13] RColorBrewer_1.1-3      desc_1.4.3              lifecycle_1.0.4         #> [16] GenomeInfoDbData_1.2.14 stringr_1.5.2           compiler_4.5.1          #> [19] farver_2.1.2            textshaping_1.0.3       ggforce_0.5.0           #> [22] htmltools_0.5.8.1       sass_0.4.10             yaml_2.3.10             #> [25] tidyr_1.3.1             pillar_1.11.0           pkgdown_2.1.3           #> [28] crayon_1.5.3            jquerylib_0.1.4         MASS_7.3-65             #> [31] DelayedArray_0.34.1     cachem_1.1.0            abind_1.4-8             #> [34] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.7           #> [37] purrr_1.1.0             dplyr_1.1.4             forcats_1.0.0           #> [40] polyclip_1.10-7         fastmap_1.2.0           grid_4.5.1              #> [43] cli_3.6.5               SparseArray_1.8.1       magrittr_2.0.3          #> [46] S4Arrays_1.8.1          readr_2.1.5             withr_3.0.2             #> [49] UCSC.utils_1.4.0        scales_1.4.0            timechange_0.3.0        #> [52] lubridate_1.9.4         rmarkdown_2.29          XVector_0.48.0          #> [55] httr_1.4.7              hms_1.1.3               ragg_1.5.0              #> [58] evaluate_1.0.5          knitr_1.50              rlang_1.1.6             #> [61] glue_1.8.0              tweenr_2.0.3            jsonlite_2.0.0          #> [64] R6_2.6.1                systemfonts_1.2.3       fs_1.6.6"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Dominance plot in 2 to N dimensions","text":"data used article comes two different sources: SummarizedExperiment object library airway data.frame retrieved supplementary library dominatRData purpose using two different sources meant show capacity dominatR process different objects.","code":"### summarized experiment data(\"airway\") se <-airway  #Let's normalize the se object and subset set.seed(123) se <- cpm_normalization(se, log_trans = FALSE, new_assay_name = 'cpm_norm') idx <- sample(seq_len(nrow(se)), size = min(25000, nrow(se))) se <- se[idx, ] colnames(se) <- paste0('S', seq_len(8))  # dataframe data(\"rnapol_score\") df1 = rnapol_score df1 = df1[,5:7]  data(\"atac_tissue_score\") df2 = atac_tissue_score"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"visualization-functions","dir":"Articles","previous_headings":"","what":"Visualization Functions","title":"Dominance plot in 2 to N dimensions","text":"Visual representation essential interpreting structure, dominance, variability features across samples conditions. package offers collection entropy-based visualization functions designed different analytical perspectives: plot_rope() Compares two numeric vectors using central ‚Äúrope‚Äù layout visualize dominance asymmetry entropy filtering. plot_triangle() Visualizes three variables ternary layout, highlighting balance dominance among triplets. plot_circle() Displays sample‚Äôs entropy average magnitude polar coordinate layout. plot_circle_frequency() Summarizes density entropy-magnitude bins using circular heat segments. Let‚Äôs now explore visualization function real data examples.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"plot_rope-rope-plot-for-binary-feature-dominance","dir":"Articles","previous_headings":"Visualization Functions","what":"plot_rope(): Rope Plot for Binary Feature Dominance","title":"Dominance plot in 2 to N dimensions","text":"function compares two numeric vectors (e.g., expression Condition vs.¬†B) using ‚Äúrope-like‚Äù 1D dominance visualization. sample classified relative dominance, optionally filtered entropy magnitude thresholds. function ideal : Comparing two groups measurements across matched samples features.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"using-a-summarized-experiment","dir":"Articles","previous_headings":"Visualization Functions","what":"Using a Summarized Experiment","title":"Dominance plot in 2 to N dimensions","text":"Using se object selecting two columns. default function considers possible entropy values magnitude values.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"basic-usage","dir":"Articles","previous_headings":"Visualization Functions > Using a Summarized Experiment","what":"Basic Usage","title":"Dominance plot in 2 to N dimensions","text":"points locate center rope, shared across variables. points start moving towards end rope, feature dominance appreciated respective variable following aesthetics can modified: rope_widht rope_color rope_border col col_bg pch pch_bg cex title Now let‚Äôs explore features plotting function offers.","code":"sample1 <- \"S1\" sample2 <- \"S2\" res_rope <- plot_rope(     x = se,     push_text =  1.2,     col = c('#7eb1d5', '#fa8451'),     column_name = c(sample1, sample2), assay_name = 'cpm_norm' )"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-1-low-entropy","dir":"Articles","previous_headings":"Visualization Functions > Using a Summarized Experiment","what":"Example 1: Low entropy","title":"Dominance plot in 2 to N dimensions","text":"Considering observations low entropy (High Dominance) level expression. Adding title plot changing colors observations. observations fall outside range colored col_bg default whitesmoke","code":"res_rope = plot_rope(     x = se,     push_text = 1.2,     column_name = c(sample1, sample2),     col = c('#7eb1d5', '#fa8451'),     entropyrange = c(0, 0.1),     maxvaluerange = c(0.1, Inf),     assay_name = 'cpm_norm' )  title(main = \"SE Input: Low Entropy\", font.main = 1)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-2-medium-entropy","dir":"Articles","previous_headings":"Visualization Functions > Using a Summarized Experiment","what":"Example 2: Medium entropy","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_rope = plot_rope(     x = se,     push_text = 1.2,     column_name = c(sample1, sample2),     col = c('#7eb1d5', '#fa8451'),     entropyrange = c(0.15, 0.8),     maxvaluerange = c(0.1, Inf),     assay_name = 'cpm_norm' )  title(main = \"SE Input: Medium Entropy\", font.main = 1)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-3-high-entropy","dir":"Articles","previous_headings":"Visualization Functions > Using a Summarized Experiment","what":"Example 3: High entropy","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_rope = plot_rope(     x = se,     push_text = 1.2,     column_name = c(sample1, sample2),     col = c('#7eb1d5', '#fa8451'),     entropyrange = c(0.8, 1),     maxvaluerange = c(0.1, Inf),     assay_name = 'cpm_norm' )   title(main = \"SE Input: High Entropy\", font.main = 1)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-4-retrieve-output-data","dir":"Articles","previous_headings":"Visualization Functions > Using a Summarized Experiment","what":"Example 4: Retrieve output data","title":"Dominance plot in 2 to N dimensions","text":"Data retrieval can achieved modifying attribute output_table . data contains information used plotting (applies data structure used) , b original values two input columns used comx, comy computed Cartesian coordinates point ‚Äúrope‚Äù. color fill color (string) actually used point. entropy Shannon entropy score feature across columns. maxvalue mean (maximum) expression value used scale point size (filter).","code":"res_rope = plot_rope(     x = se,     push_text = 1.2,     column_name = c(sample1, sample2),     output_table = TRUE,     col = c('#7eb1d5', '#fa8451'),     entropyrange = c(0.8, 1),     maxvaluerange = c(0, Inf),      assay_name = 'cpm_norm' ) head(res_rope) #>                           a            b        comx    comy      color #> ENSG00000260166  0.00000000   0.00000000  0.00000000 -0.0140 whitesmoke #> ENSG00000266931  0.00000000   0.00000000  0.00000000  0.0785 whitesmoke #> ENSG00000104774 93.95303443 101.33187620  0.03778501  0.0370    #fa8451 #> ENSG00000267583  0.00000000   0.05316468  1.00000000 -0.1650 whitesmoke #> ENSG00000227581  0.04845438   0.00000000 -1.00000000 -0.2420 whitesmoke #> ENSG00000227317  0.00000000   0.00000000  0.00000000  0.2190 whitesmoke #>                     maxvalue   entropy #> ENSG00000260166   0.00000000 0.0000000 #> ENSG00000266931   0.00000000 0.0000000 #> ENSG00000104774 101.33187620 0.9989699 #> ENSG00000267583   0.05316468 0.0000000 #> ENSG00000227581   0.04845438 0.0000000 #> ENSG00000227317   0.00000000 0.0000000"},{"path":[]},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"basic-usage-1","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Basic Usage","title":"Dominance plot in 2 to N dimensions","text":"","code":"sample1 = 'pol1' sample2 = 'pol2'   res_rope = plot_rope(     x = df1,     push_text = 1.2,     col = c('#a9c4d6', '#ffc9b3'),     column_name = c(sample1, sample2), )  title(main = 'Basic Usage')"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-1--low-entropy-filtering-0-0-1","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Example 1. Low entropy filtering (0-0.1)","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_rope = plot_rope(     x = df1,     column_name = c(sample1, sample2),     push_text = 1.2,     col = c('#a9c4d6', '#ffc9b3'),     entropyrange = c(0, 0.1), )  title(main = 'Low Entropy Filtering')"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-2--high-entropy-filtering-0-8-1","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Example 2. High entropy filtering (0.8-1)","title":"Dominance plot in 2 to N dimensions","text":"### Miscellaneous Changing aesthetics attributes","code":"res_rope = plot_rope(     x = df1,     column_name = c(sample1, sample2),     push_text = 1.2,     col = c('#a9c4d6', '#ffc9b3'),     entropyrange = c(0.8, 1), )  title(main = 'High Entropy Filtering') res_rope = plot_rope(     x = df1,     column_name = c(sample1, sample2),     rope_color = 'white',     col = c('#001052', '#fa4c07'),     col_bg = 'gray',     pch_bg = 2,     pch = c(10, 18),     entropyrange = c(0, 0.5), )  title(main = 'Modifying Attributes')"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"plot_triangle-ternary-plot-for-three-way-feature-relationships","dir":"Articles","previous_headings":"Visualization Functions","what":"plot_triangle(): Ternary Plot for Three-Way Feature Relationships","title":"Dominance plot in 2 to N dimensions","text":"function visualizes three-part compositions (e.g., condition /B/C contributions) ternary plot. Useful analyzing data three mutually exclusive categories proportions summing one. function ideal : Displaying relationships three mutually exclusive components. Exploring feature allocation among three sources pathways (e.g., tissue /B/C). Identifying samples/features located edge center triangular composition space.","code":""},{"path":[]},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"basic-usage-2","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Basic Usage","title":"Dominance plot in 2 to N dimensions","text":"points locate center circle shared across three variables. points start moving towards edges triangle dominated one particular variable. Points line perimeter triangle display shareness two variable points closer . following aesthetics can modified: background_color cex pch col Now let‚Äôs explore features plotting function offers.","code":"samples <- c('pol1', 'pol2', 'pol3') res_t = plot_triangle(     x = df1,     column_name = samples,      pch = 21,     push_text = 1.3,     col = c('#ff80e3', '#7eb1d5', '#fa8451') )  title(main = 'Basic Usage', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-1--low-entropy-genes-0-0-4","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Example 1. Low Entropy Genes (0-0.4)","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_t = plot_triangle(     x = df1,     column_name = samples,      pch = 21,     push_text = 1.3,     col = c('#ff80e3', '#7eb1d5', '#fa8451'),     entropyrange = c(0, 0.4) )  title(main = 'Low Entropy Genes', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-2--medium-entropy-genes-0-4-1-3","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Example 2. Medium Entropy Genes (0.4-1.3)","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_t = plot_triangle(     x = df1,     column_name = samples,      pch = 21,     push_text = 1.3,     col = c('#ff80e3', '#7eb1d5', '#fa8451'),     entropyrange = c(0.4, 1.3) )  title(main = 'Medium Entropy Genes', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-3--high-entropy-genes-1-3-inf","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Example 3. High Entropy Genes (1.3-Inf)","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_t = plot_triangle(     x = df1,     column_name = samples,      pch = 21,     push_text = 1.3,     col = c('#ff80e3', '#7eb1d5', '#fa8451'),     entropyrange = c(1.3, Inf) )  title(main = 'High Entropy Genes', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-4--high-entropy-magnitude-range-5-inf","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Example 4. High Entropy + Magnitude range (5-Inf)","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_t = plot_triangle(     x = df1,     column_name = samples,      pch = 21,     push_text = 1.3,     col = c('#ff80e3', '#7eb1d5', '#fa8451'),     entropyrange = c(1.3, Inf),     maxvaluerange = c(5, Inf) )  title(main = 'High Entropy Genes + Magnitude range', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-5--remove-background-points","dir":"Articles","previous_headings":"Visualization Functions > Using a matrix or data.frame input","what":"Example 5. Remove Background Points","title":"Dominance plot in 2 to N dimensions","text":"setting plotAll = FALSE function remove points fall outside entropyrange maxvaluerange","code":"res_t <- plot_triangle(     x = df1,     column_name = samples,      pch = 21,     push_text = 1.3,     col = c('#ff80e3', '#7eb1d5', '#fa8451'),     entropyrange = c(1.3, Inf),     maxvaluerange = c(5, Inf),     plotAll = FALSE )  title(main = 'Removing genes out of range', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"using-a-summarizedexperiment-object","dir":"Articles","previous_headings":"Visualization Functions","what":"Using a SummarizedExperiment object","title":"Dominance plot in 2 to N dimensions","text":"function can use assay, user specify name assay, name specified default look first assay se object","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"basic-usage-3","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Basic Usage","title":"Dominance plot in 2 to N dimensions","text":"","code":"samples = c('S1','S2','S3') res_t <- plot_triangle(     x = se,    col = c('#7eb1d5','#ff80e3',  '#fa8451'),     column_name = samples,     assay_name = 'cpm_norm',     pch = 21,     push_text = 1.3, )  title(main = 'Basic Usage SE', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-1--low-entropy-0-0-4","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Example 1. Low entropy (0-0.4)","title":"Dominance plot in 2 to N dimensions","text":"","code":"res_t <- plot_triangle(     x = se,    col = c('#7eb1d5','#ff80e3',  '#fa8451'),     column_name = samples,     assay_name = 'cpm_norm',     entropyrange = c(0, 0.4),     maxvaluerange = c(0.1, Inf),     pch = 21,     push_text = 1.3, )  title(main = 'Low entropy SE', font.main = 1, cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-4--output-data-retrieval","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Example 4. Output Data Retrieval","title":"Dominance plot in 2 to N dimensions","text":"Data retrieval can achieved modifying attribute output_table . data contains information used plotting (applies data structure used) max_counts maximum normalized expression value (across selected samples) feature. comxcomy x‚Äì y‚Äìcoordinates used place point inside triangle. color provided colors applied (one per sample), whitesmoke filtered points. entropy Shannon entropy score feature across columns.","code":"res_t <- plot_triangle(     x = se,    col = c('#7eb1d5','#ff80e3',  '#fa8451'),     column_name = samples,     assay_name = 'cpm_norm',     entropyrange = c(0, 0.4),     maxvaluerange = c(0.1, Inf),     pch = 21,     push_text = 1.3,     output_table = TRUE ) # View first 6 rows of the output data head(res_t) #>                   max_counts       comx         comy         a         b #> ENSG00000260166   0.00000000 0.00000000  0.000000000 0.0000000 0.0000000 #> ENSG00000266931   0.00000000 0.00000000  0.000000000 0.0000000 0.0000000 #> ENSG00000104774 101.33187620 0.03283081 -0.006864875 0.3287567 0.3545765 #> ENSG00000267583   0.05316468 0.86602540 -0.500000000 0.0000000 1.0000000 #> ENSG00000227581   0.04845438 0.00000000  1.000000000 1.0000000 0.0000000 #> ENSG00000227317   0.00000000 0.00000000  0.000000000 0.0000000 0.0000000 #>                         c  Entropy      color #> ENSG00000260166 0.0000000 0.000000 whitesmoke #> ENSG00000266931 0.0000000 0.000000 whitesmoke #> ENSG00000104774 0.3166667 1.583349 whitesmoke #> ENSG00000267583 0.0000000 0.000000 whitesmoke #> ENSG00000227581 0.0000000 0.000000 whitesmoke #> ENSG00000227317 0.0000000 0.000000 whitesmoke"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"plot_circle-entropy-magnitude-circle-plot","dir":"Articles","previous_headings":"Visualization Functions","what":"plot_circle: Entropy-Magnitude Circle Plot","title":"Dominance plot in 2 to N dimensions","text":"function visualizes high-dimensional input number dimensions Using polar coordinate system : - Radial position represents Shannon entropy degrees. total P-1 (P = Number Variables) circles plotted represent degrees dominance. outtermost circle represents observations dominated one variable. second outtermost circle represents observations dominated two variables. innermost circle represents observations uniform across variables. function ideal : Visualizing multidimensional datasets (samples √ó features) interpretable 2D circular space. Detecting samples/features high entropy (irregularity) high average expression. Facilitating compact visualization across thousands rows columns. Basic Understanding: Dominant Sample: Shows sample highest expression gene Useful identifying sample-specific expression patterns Radial Position: Genes near edge: Highly specific one sample (low entropy) Genes near center: Similar expression across samples (high entropy) Sector Position: wedge represents sample Genes sample‚Äôs wedge highest expression sample circle_plot function able handle SummarizedExperiment objects, data.frames matrices just like previous plots. Note: randomization asignment points space specific gene/observation shared across many variables. way example, gene_abc shared across tissue , B, C D, function randomly choose variable plotting","code":"### Let's select only numerical columns df2 = atac_tissue_score[,c(1,8:26)] rownames(df2) = atac_tissue_score$Gene"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"using-a-dataframe","dir":"Articles","previous_headings":"Visualization Functions","what":"Using a dataframe","title":"Dominance plot in 2 to N dimensions","text":"","code":"plot_circle(     x = df2,     n = 19,     entropyrange = c(0,Inf),     magnituderange   = c(1, Inf),     label  = 'legend',     output_table = F,     assay_name = 'cpm_norm' )"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"using-a-summarizedexperiment-input","dir":"Articles","previous_headings":"Visualization Functions","what":"Using a SummarizedExperiment input","title":"Dominance plot in 2 to N dimensions","text":"following aesthetics can modified: background_polygon background_na_polygon background_alpha_polygon point_size point_fill_colors point_fill_na_colors point_line_colors point_line_na_colors straight_points line_col out_line text_label_curve_size label Now let‚Äôs explore features plotting function offers using dataframe. plots can made using SummarizedExperiment. Please see examples plot_circle function ?plot_circle","code":"plot_circle(     x = se,     n = 8,     entropyrange = c(0,Inf),     magnituderange   = c(0.1, Inf),     label  = 'legend',     output_table = FALSE,     assay_name = 'cpm_norm' )"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-1-low-entropy-filtering-0-1","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment input","what":"Example 1: Low-entropy filtering (0-1)","title":"Dominance plot in 2 to N dimensions","text":"Highlighting genes low Entropy (high dominance one variable)  Highlighting samples possible . Lets highlight variable Brain, Lung, Liver. names appear around circle label = 'curve' points areas colored","code":"plot_circle(     x = df2,     n = 19,     entropyrange     = c(0, 2),     magnituderange   = c(1, Inf),     label  = 'legend',     output_table = FALSE ) plot_circle(     x = df2,     n = 19,     entropyrange     = c(0, 2),     magnituderange   = c(1, Inf),     label  = 'legend',     variables_highlight = c('Brain', 'Lung', 'Liver', 'Breast'),     output_table = FALSE,     background_polygon = c('Brain' = '#7eb1d5', 'Lung' = 'gold',                             'Liver' = 'indianred', 'Breast' = '#ff80e3'),      point_fill_colors = c('Brain' = '#7eb1d5', 'Lung' = 'gold',                             'Liver' = 'indianred', 'Breast' = '#ff80e3'),      background_alpha_polygon = 0.1,     point_size = 2,      point_line_colors = c('Brain' = 'black', 'Lung' = 'black',                            'Liver' = 'black', 'Breast' = 'black') )"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-3-high-entropy-filtering-2-3","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment input","what":"Example 3: High-entropy filtering (2-3)","title":"Dominance plot in 2 to N dimensions","text":"","code":"plot_circle(     x = df2,     n = 19,     entropyrange     = c(2, 3.5),     magnituderange   = c(1, Inf),     label  = 'legend',     output_table = FALSE,      point_size = 3 )"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-4-grouping-by-a-column-factor-category","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment input","what":"Example 4: Grouping by a column factor ‚ÄòCategory‚Äô","title":"Dominance plot in 2 to N dimensions","text":"Let‚Äôs highlight specific spread points  way possible color observations specific category. example, highlighting RNA Pol III transcribed genes low uniformity across tissues (aka = Specific) locate edge circle. also highlighting genes high uniformity across tissues (aka = 75% Tissues) locate center circle","code":"plot_circle(     x = df2,     n = 19,     entropyrange     = c(0, Inf),     magnituderange   = c(1, Inf),     column_variable_factor = 'core_type',     label  = 'curve',     output_table = FALSE,      point_size = 3 ) plot_circle(     x = df2,     n = 19,     entropyrange     = c(0, Inf),     magnituderange   = c(1, Inf),     column_variable_factor = 'core_type',     label  = 'curve',     output_table = FALSE,      point_size = 3,     straight_points = FALSE,      point_fill_colors = c('Specific' = '#fa8451', '75% Tissues' = '#7eb1d5'),     point_line_colors = c('Specific' = '#fa8451', '75% Tissues' = '#7eb1d5'),       )"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-7-retrieving-plot-data-from-se","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment input","what":"Example 7: Retrieving plot data from SE","title":"Dominance plot in 2 to N dimensions","text":"result list two objects: results[[1]]: ggplot2 object visualization results[[2]]: data.frame entropy, magnitude, etc.  returned data frame (se_results[[2]]) contains following columns: Entropy: entropy score computed across rows (sample feature). col: dominant sample alocated gene plotting space. observatio tied among variables, random variable chosen rad: magnitude (mean expression) encoded radial distance plot. deg: plotting angle (radians) sample‚Äôs axis. x, y: Cartesian coordinates corresponding (rad, deg), used internally geom_point(). labels: text labels (e.g.¬†sample names) label = \"legend\" variables_highlight set. rand_deg: random rotation offset (fixed call set.seed() beforehand). alpha: point transparency (1 highlighted points, otherwise equal background_alpha_polygon setting).","code":"results <- plot_circle(     x = df2,     n = 19,     entropyrange     = c(0, Inf),     magnituderange   = c(1, Inf),     column_variable_factor = 'core_type',     label  = 'curve',     output_table = TRUE,      point_size = 3,     straight_points = FALSE      ) results[[1]] head(results[[2]]) #>                                                Factor  Entropy        col #> tRNA-Gly-GCC-1-3&&100172                  75% Tissues 4.247928 Gastroesop #> Metazoa_SRP_SRP_RNA_URS0000972307&&100175    Specific 0.000000     Spleen #> tRNA-Val-CAC-1-4&&10049                   75% Tissues 4.247928 Adrenal.Gl #> tRNA-Glu-TTC-3-1&&10055                   75% Tissues 4.247928     Spleen #> tRNA-Asn-GTT-1-6&&10056                   75% Tissues 4.247928      Liver #> tRNA-Gly-TCC-4-1&&10058                   75% Tissues 4.247928      Brain #>                                                    rad         deg #> tRNA-Gly-GCC-1-3&&100172                  1.421085e-14 -3.05891916 #> Metazoa_SRP_SRP_RNA_URS0000972307&&100175 1.000000e+02  0.90940840 #> tRNA-Val-CAC-1-4&&10049                   1.421085e-14 -0.08267349 #> tRNA-Glu-TTC-3-1&&10055                   1.421085e-14  0.90940840 #> tRNA-Asn-GTT-1-6&&10056                   1.421085e-14  0.57871444 #> tRNA-Gly-TCC-4-1&&10058                   1.421085e-14 -4.71238898 #>                                                       x             y #> tRNA-Gly-GCC-1-3&&100172                  -1.416351e-14 -1.159068e-15 #> Metazoa_SRP_SRP_RNA_URS0000972307&&100175  6.134069e+01  7.897670e+01 #> tRNA-Val-CAC-1-4&&10049                    1.417034e-14 -1.072310e-15 #> tRNA-Glu-TTC-3-1&&10055                    8.648143e-15  1.127644e-14 #> tRNA-Asn-GTT-1-6&&10056                    1.192059e-14  7.736136e-15 #> tRNA-Gly-TCC-4-1&&10058                   -4.351330e-17  1.421079e-14 #>                                               labels    rand_deg     alpha #> tRNA-Gly-GCC-1-3&&100172                  Gastroesop -3.05993982 0.7764249 #> Metazoa_SRP_SRP_RNA_URS0000972307&&100175     Spleen  0.91042906 1.0000000 #> tRNA-Val-CAC-1-4&&10049                   Adrenal.Gl -0.07552887 0.7764249 #> tRNA-Glu-TTC-3-1&&10055                       Spleen  0.91655302 0.7764249 #> tRNA-Asn-GTT-1-6&&10056                        Liver  0.57565246 0.7764249 #> tRNA-Gly-TCC-4-1&&10058                        Brain -4.70932700 0.7764249"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"plot_circle_frequency-frequency-stratified-entropy-magnitude-visualization","dir":"Articles","previous_headings":"Visualization Functions","what":"plot_circle_frequency(): Frequency-Stratified Entropy-Magnitude Visualization","title":"Dominance plot in 2 to N dimensions","text":"function builds upon plot_circle() stratifying samples frequency bins visualizing entropy-magnitude patterns bin separately. Useful dataset contains variables/features different levels occurrence sparsity (e.g., expressed vs.¬†non-expressed genes). function ideal : Identifying highly prevalent genes/features across cohort. Screening outlier inactive variables. Visually comparing distributions compact format.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"using-a-summarizedexperiment-object-1","dir":"Articles","previous_headings":"Visualization Functions","what":"Using a SummarizedExperiment object","title":"Dominance plot in 2 to N dimensions","text":"","code":"# Creating the circle plot data  # First we create the circle plot with output_table = TRUE to get  # the data needed for the frequency plot. We'll use gene biotype as our  # factor variable.  circle_data <- plot_circle(     x = se,     n = 8,     column_variable_factor = 'gene_biotype',     entropyrange = c(0, Inf),     magnituderange = c(0.1, Inf),     label = 'legend',     output_table = TRUE,     assay_name = 'cpm_norm' )"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-1-default-parameters-combined-panel","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Example 1: Default parameters (combined panel)","title":"Dominance plot in 2 to N dimensions","text":"","code":"freq_plot_default <- plot_circle_frequency(     n = 8,     circle = circle_data,     single = TRUE,     legend = TRUE,     numb_columns = 1,     filter_class = NULL,     point_size = 2 )  # Display the plot freq_plot_default[[1]] # View aggregated data head(freq_plot_default[[2]]) #>   bin                   Factor n proportion #> 1   1 3prime_overlapping_ncrna 0        0.0 #> 2   2 3prime_overlapping_ncrna 0        0.0 #> 3   3 3prime_overlapping_ncrna 0        0.0 #> 4   4 3prime_overlapping_ncrna 0        0.0 #> 5   5 3prime_overlapping_ncrna 2        0.5 #> 6   6 3prime_overlapping_ncrna 0        0.0"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-2-faceted-by-factor","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Example 2: Faceted by factor","title":"Dominance plot in 2 to N dimensions","text":"","code":"# Visualize each factor level in separate panels  plot_circle_frequency(     n = 8,     circle = circle_data,     single = FALSE,     legend = TRUE,     numb_columns = 3,  # Arrange in 3 columns     filter_class = NULL,     point_size = 2 ) #> $plot_stat #>  #> $data #>     bin                   Factor    n  proportion #> 1     1 3prime_overlapping_ncrna    0 0.000000000 #> 2     2 3prime_overlapping_ncrna    0 0.000000000 #> 3     3 3prime_overlapping_ncrna    0 0.000000000 #> 4     4 3prime_overlapping_ncrna    0 0.000000000 #> 5     5 3prime_overlapping_ncrna    2 0.500000000 #> 6     6 3prime_overlapping_ncrna    0 0.000000000 #> 7     7 3prime_overlapping_ncrna    0 0.000000000 #> 8     8 3prime_overlapping_ncrna    2 0.500000000 #> 9     1                antisense    7 0.008373206 #> 10    2                antisense   18 0.021531100 #> 11    3                antisense   51 0.061004785 #> 12    4                antisense   73 0.087320574 #> 13    5                antisense  100 0.119617225 #> 14    6                antisense  120 0.143540670 #> 15    7                antisense  229 0.273923445 #> 16    8                antisense  238 0.284688995 #> 17    1                  lincRNA   17 0.021383648 #> 18    2                  lincRNA   28 0.035220126 #> 19    3                  lincRNA   54 0.067924528 #> 20    4                  lincRNA   74 0.093081761 #> 21    5                  lincRNA   99 0.124528302 #> 22    6                  lincRNA  119 0.149685535 #> 23    7                  lincRNA  227 0.285534591 #> 24    8                  lincRNA  177 0.222641509 #> 25    1                    miRNA    4 0.055555556 #> 26    2                    miRNA    9 0.125000000 #> 27    3                    miRNA    8 0.111111111 #> 28    4                    miRNA   12 0.166666667 #> 29    5                    miRNA   11 0.152777778 #> 30    6                    miRNA   15 0.208333333 #> 31    7                    miRNA    8 0.111111111 #> 32    8                    miRNA    5 0.069444444 #> 33    1                 misc_RNA    2 0.035714286 #> 34    2                 misc_RNA    1 0.017857143 #> 35    3                 misc_RNA   12 0.214285714 #> 36    4                 misc_RNA    9 0.160714286 #> 37    5                 misc_RNA    3 0.053571429 #> 38    6                 misc_RNA   12 0.214285714 #> 39    7                 misc_RNA   11 0.196428571 #> 40    8                 misc_RNA    6 0.107142857 #> 41    1                  Mt_tRNA    0 0.000000000 #> 42    2                  Mt_tRNA    1 0.250000000 #> 43    3                  Mt_tRNA    1 0.250000000 #> 44    4                  Mt_tRNA    0 0.000000000 #> 45    5                  Mt_tRNA    0 0.000000000 #> 46    6                  Mt_tRNA    0 0.000000000 #> 47    7                  Mt_tRNA    1 0.250000000 #> 48    8                  Mt_tRNA    1 0.250000000 #> 49    1   polymorphic_pseudogene    0 0.000000000 #> 50    2   polymorphic_pseudogene    0 0.000000000 #> 51    3   polymorphic_pseudogene    0 0.000000000 #> 52    4   polymorphic_pseudogene    0 0.000000000 #> 53    5   polymorphic_pseudogene    0 0.000000000 #> 54    6   polymorphic_pseudogene    2 0.666666667 #> 55    7   polymorphic_pseudogene    1 0.333333333 #> 56    8   polymorphic_pseudogene    0 0.000000000 #> 57    1     processed_transcript    1 0.009708738 #> 58    2     processed_transcript    0 0.000000000 #> 59    3     processed_transcript    3 0.029126214 #> 60    4     processed_transcript    5 0.048543689 #> 61    5     processed_transcript   12 0.116504854 #> 62    6     processed_transcript   14 0.135922330 #> 63    7     processed_transcript   26 0.252427184 #> 64    8     processed_transcript   42 0.407766990 #> 65    1           protein_coding   31 0.005099523 #> 66    2           protein_coding   45 0.007402533 #> 67    3           protein_coding  100 0.016450074 #> 68    4           protein_coding  126 0.020727093 #> 69    5           protein_coding  207 0.034051653 #> 70    6           protein_coding  370 0.060865274 #> 71    7           protein_coding  858 0.141141635 #> 72    8           protein_coding 4342 0.714262214 #> 73    1               pseudogene   29 0.020999276 #> 74    2               pseudogene   50 0.036205648 #> 75    3               pseudogene   65 0.047067343 #> 76    4               pseudogene   89 0.064446054 #> 77    5               pseudogene  148 0.107168718 #> 78    6               pseudogene  215 0.155684287 #> 79    7               pseudogene  339 0.245474294 #> 80    8               pseudogene  446 0.322954381 #> 81    1                     rRNA    0 0.000000000 #> 82    2                     rRNA    1 0.100000000 #> 83    3                     rRNA    0 0.000000000 #> 84    4                     rRNA    1 0.100000000 #> 85    5                     rRNA    4 0.400000000 #> 86    6                     rRNA    1 0.100000000 #> 87    7                     rRNA    3 0.300000000 #> 88    8                     rRNA    0 0.000000000 #> 89    1           sense_intronic    1 0.009523810 #> 90    2           sense_intronic    5 0.047619048 #> 91    3           sense_intronic    4 0.038095238 #> 92    4           sense_intronic    7 0.066666667 #> 93    5           sense_intronic   13 0.123809524 #> 94    6           sense_intronic   21 0.200000000 #> 95    7           sense_intronic   31 0.295238095 #> 96    8           sense_intronic   23 0.219047619 #> 97    1        sense_overlapping    0 0.000000000 #> 98    2        sense_overlapping    0 0.000000000 #> 99    3        sense_overlapping    4 0.093023256 #> 100   4        sense_overlapping    1 0.023255814 #> 101   5        sense_overlapping    3 0.069767442 #> 102   6        sense_overlapping    5 0.116279070 #> 103   7        sense_overlapping   15 0.348837209 #> 104   8        sense_overlapping   15 0.348837209 #> 105   1                   snoRNA    0 0.000000000 #> 106   2                   snoRNA    1 0.023255814 #> 107   3                   snoRNA    3 0.069767442 #> 108   4                   snoRNA    7 0.162790698 #> 109   5                   snoRNA   10 0.232558140 #> 110   6                   snoRNA   13 0.302325581 #> 111   7                   snoRNA    8 0.186046512 #> 112   8                   snoRNA    1 0.023255814 #> 113   1                    snRNA    1 0.018867925 #> 114   2                    snRNA    2 0.037735849 #> 115   3                    snRNA    5 0.094339623 #> 116   4                    snRNA   10 0.188679245 #> 117   5                    snRNA    9 0.169811321 #> 118   6                    snRNA   17 0.320754717 #> 119   7                    snRNA    9 0.169811321 #> 120   8                    snRNA    0 0.000000000 #> 121   1                TR_C_gene    0 0.000000000 #> 122   2                TR_C_gene    0 0.000000000 #> 123   3                TR_C_gene    0 0.000000000 #> 124   4                TR_C_gene    0 0.000000000 #> 125   5                TR_C_gene    0 0.000000000 #> 126   6                TR_C_gene    0 0.000000000 #> 127   7                TR_C_gene    1 1.000000000 #> 128   8                TR_C_gene    0 0.000000000 #> 129   1                TR_V_gene    0 0.000000000 #> 130   2                TR_V_gene    1 0.500000000 #> 131   3                TR_V_gene    0 0.000000000 #> 132   4                TR_V_gene    0 0.000000000 #> 133   5                TR_V_gene    1 0.500000000 #> 134   6                TR_V_gene    0 0.000000000 #> 135   7                TR_V_gene    0 0.000000000 #> 136   8                TR_V_gene    0 0.000000000"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-3-filtering-specific-classes","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Example 3: Filtering specific classes","title":"Dominance plot in 2 to N dimensions","text":"","code":"# Focus on specific gene biotypes  plot_circle_frequency(     n = 8,     circle = circle_data,     single = FALSE,     legend = TRUE,     numb_columns = 1,       filter_class = c('protein_coding', 'snoRNA'),     point_size = 3   ) #> $plot_stat #>  #> $data #>     bin         Factor    n  proportion #> 65    1 protein_coding   31 0.005099523 #> 66    2 protein_coding   45 0.007402533 #> 67    3 protein_coding  100 0.016450074 #> 68    4 protein_coding  126 0.020727093 #> 69    5 protein_coding  207 0.034051653 #> 70    6 protein_coding  370 0.060865274 #> 71    7 protein_coding  858 0.141141635 #> 72    8 protein_coding 4342 0.714262214 #> 105   1         snoRNA    0 0.000000000 #> 106   2         snoRNA    1 0.023255814 #> 107   3         snoRNA    3 0.069767442 #> 108   4         snoRNA    7 0.162790698 #> 109   5         snoRNA   10 0.232558140 #> 110   6         snoRNA   13 0.302325581 #> 111   7         snoRNA    8 0.186046512 #> 112   8         snoRNA    1 0.023255814"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"example-4-combined-plot-with-custom-filtering","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Example 4: Combined plot with custom filtering","title":"Dominance plot in 2 to N dimensions","text":"","code":"# Create a combined plot showing only selected classes  plot_circle_frequency(     n = 8,     circle = circle_data,     single = TRUE,     legend = TRUE,     numb_columns = 1,      filter_class = c('protein_coding', 'snoRNA'),     point_size = 3 ) #> $plot_stat #>  #> $data #>     bin         Factor    n  proportion #> 65    1 protein_coding   31 0.005099523 #> 66    2 protein_coding   45 0.007402533 #> 67    3 protein_coding  100 0.016450074 #> 68    4 protein_coding  126 0.020727093 #> 69    5 protein_coding  207 0.034051653 #> 70    6 protein_coding  370 0.060865274 #> 71    7 protein_coding  858 0.141141635 #> 72    8 protein_coding 4342 0.714262214 #> 105   1         snoRNA    0 0.000000000 #> 106   2         snoRNA    1 0.023255814 #> 107   3         snoRNA    3 0.069767442 #> 108   4         snoRNA    7 0.162790698 #> 109   5         snoRNA   10 0.232558140 #> 110   6         snoRNA   13 0.302325581 #> 111   7         snoRNA    8 0.186046512 #> 112   8         snoRNA    1 0.023255814"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"output-interpretation","dir":"Articles","previous_headings":"Visualization Functions > Using a SummarizedExperiment object","what":"Output interpretation","title":"Dominance plot in 2 to N dimensions","text":"arc segment represents: variable (e.g., gene), sorted frequency. Arc height indicates proportion samples threshold. returned table includes: Variable: variable name (e.g., gene ID) Proportion: % samples value threshold Threshold: cutoff used Rank: position sorted list","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Dominance-plot-in-2-to-N-dimensions.html","id":"session-info","dir":"Articles","previous_headings":"Visualization Functions","what":"Session Info","title":"Dominance plot in 2 to N dimensions","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.5.2               dominatRData_0.99.0         #>  [3] airway_1.28.0               SummarizedExperiment_1.38.1 #>  [5] Biobase_2.68.0              GenomicRanges_1.60.0        #>  [7] GenomeInfoDb_1.44.2         IRanges_2.42.0              #>  [9] S4Vectors_0.46.0            BiocGenerics_0.54.0         #> [11] generics_0.1.4              MatrixGenerics_1.20.0       #> [13] matrixStats_1.5.0           dominatR_0.99.0             #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6            xfun_0.53               bslib_0.9.0             #>  [4] lattice_0.22-7          tzdb_0.5.0              vctrs_0.6.5             #>  [7] tools_4.5.1             tibble_3.3.0            pkgconfig_2.0.3         #> [10] Matrix_1.7-3            tidyverse_2.0.0         ggnewscale_0.5.2        #> [13] RColorBrewer_1.1-3      desc_1.4.3              lifecycle_1.0.4         #> [16] GenomeInfoDbData_1.2.14 stringr_1.5.2           compiler_4.5.1          #> [19] farver_2.1.2            textshaping_1.0.3       geomtextpath_0.2.0      #> [22] ggforce_0.5.0           htmltools_0.5.8.1       sass_0.4.10             #> [25] yaml_2.3.10             tidyr_1.3.1             pillar_1.11.0           #> [28] pkgdown_2.1.3           crayon_1.5.3            jquerylib_0.1.4         #> [31] MASS_7.3-65             DelayedArray_0.34.1     cachem_1.1.0            #> [34] abind_1.4-8             tidyselect_1.2.1        digest_0.6.37           #> [37] stringi_1.8.7           purrr_1.1.0             dplyr_1.1.4             #> [40] labeling_0.4.3          forcats_1.0.0           polyclip_1.10-7         #> [43] fastmap_1.2.0           grid_4.5.1              cli_3.6.5               #> [46] SparseArray_1.8.1       magrittr_2.0.3          S4Arrays_1.8.1          #> [49] readr_2.1.5             withr_3.0.2             UCSC.utils_1.4.0        #> [52] scales_1.4.0            timechange_0.3.0        lubridate_1.9.4         #> [55] rmarkdown_2.29          XVector_0.48.0          httr_1.4.7              #> [58] hms_1.1.3               ragg_1.5.0              evaluate_1.0.5          #> [61] knitr_1.50              rlang_1.1.6             glue_1.8.0              #> [64] tweenr_2.0.3            jsonlite_2.0.0          R6_2.6.1                #> [67] systemfonts_1.2.3       fs_1.6.6"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Normalization Functions","text":"data used article comes following source: SummarizedExperiment object library airway case using single object given can manipulated SummarizedExperiment data.frame","code":"### summarized experiment data(\"airway\") se <-airway"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"normalization-methods","dir":"Articles","previous_headings":"","what":"Normalization Methods","title":"Normalization Functions","text":"Normalization critical correcting technical biases enabling meaningful biological comparisons. package contains different normalization methods, include log_transf attribute calculates log2(x+1) normalized value set TRUE: cpm_normalization minmax_normalization quantile_normalization rpkm_normalization tpm_normalization Let‚Äôs explore usage normalization method airway data.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"min-max-normalization","dir":"Articles","previous_headings":"Normalization Methods","what":"Min-Max Normalization","title":"Normalization Functions","text":"Min-Max normalization linear transformation technique rescales gene‚Äôs expression values specified range (typically [0, 1]). normalization method useful want bring data onto scale. Function Purpose: ¬∑ Rescales column fit within range [new_min, new_max]. ¬∑ Preserves relative structure values within column. ¬∑ Useful different assays samples varying scales.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-1-normalize-a-matrix","dir":"Articles","previous_headings":"Normalization Methods > Min-Max Normalization","what":"Example 1: Normalize a matrix","title":"Normalization Functions","text":"can set new_min = 10 new_max = 20 downstream application prefers values different scale:","code":"# Prepare input matrix count_mat <- assay(se)  # Apply min-max normalization se_minmax <- minmax_normalization(count_mat, new_min = 0, new_max = 1)  # Inspect structure dim(se_minmax) #> [1] 63677     8 summary(as.vector(se_minmax)) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 0.000e+00 0.000e+00 0.000e+00 9.679e-04 2.739e-05 1.000e+00 head(se_minmax[, 1:5]) #>                   SRR1039508   SRR1039509   SRR1039512   SRR1039513 #> ENSG00000000003 0.0022792424 0.0017523136 1.699217e-03 0.0014897144 #> ENSG00000000005 0.0000000000 0.0000000000 0.000000e+00 0.0000000000 #> ENSG00000000419 0.0015676086 0.0020143784 1.208721e-03 0.0013327102 #> ENSG00000000457 0.0008727585 0.0008253084 5.119062e-04 0.0005988068 #> ENSG00000000460 0.0002014058 0.0002151278 7.785646e-05 0.0001277941 #> ENSG00000000938 0.0000000000 0.0000000000 3.892823e-06 0.0000000000 #>                   SRR1039516 #> ENSG00000000003 2.860799e-03 #> ENSG00000000005 0.000000e+00 #> ENSG00000000419 1.475649e-03 #> ENSG00000000457 6.159013e-04 #> ENSG00000000460 1.960829e-04 #> ENSG00000000938 2.513883e-06 df_scaled <- minmax_normalization(count_mat, new_min = 10, new_max = 20) head(df_scaled)  # All columns now range from 10 to 20 #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003   10.02279   10.01752   10.01699   10.01490   10.02861 #> ENSG00000000005   10.00000   10.00000   10.00000   10.00000   10.00000 #> ENSG00000000419   10.01568   10.02014   10.01209   10.01333   10.01476 #> ENSG00000000457   10.00873   10.00825   10.00512   10.00599   10.00616 #> ENSG00000000460   10.00201   10.00215   10.00078   10.00128   10.00196 #> ENSG00000000938   10.00000   10.00000   10.00004   10.00000   10.00003 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000000003   10.02607   10.02033   10.01536 #> ENSG00000000005   10.00000   10.00000   10.00000 #> ENSG00000000419   10.01990   10.01101   10.01364 #> ENSG00000000457   10.00824   10.00615   10.00615 #> ENSG00000000460   10.00157   10.00201   10.00161 #> ENSG00000000938   10.00000   10.00000   10.00000"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-2-normalize-a-summarizedexperiment","dir":"Articles","previous_headings":"Normalization Methods > Min-Max Normalization","what":"Example 2: Normalize a SummarizedExperiment","title":"Normalization Functions","text":"using option new_assay_name possible store normalized data new assay summarizedexperiment object keeping count matrix intact. name provided upon normalization, function overwrite count matrix","code":"se <- se  # Option A: Overwrite the default assay se1 <- minmax_normalization(se) head(assay(se1)) #>                   SRR1039508   SRR1039509   SRR1039512   SRR1039513 #> ENSG00000000003 0.0022792424 0.0017523136 1.699217e-03 0.0014897144 #> ENSG00000000005 0.0000000000 0.0000000000 0.000000e+00 0.0000000000 #> ENSG00000000419 0.0015676086 0.0020143784 1.208721e-03 0.0013327102 #> ENSG00000000457 0.0008727585 0.0008253084 5.119062e-04 0.0005988068 #> ENSG00000000460 0.0002014058 0.0002151278 7.785646e-05 0.0001277941 #> ENSG00000000938 0.0000000000 0.0000000000 3.892823e-06 0.0000000000 #>                   SRR1039516   SRR1039517   SRR1039520   SRR1039521 #> ENSG00000000003 2.860799e-03 0.0026074678 0.0020325525 0.0015356158 #> ENSG00000000005 0.000000e+00 0.0000000000 0.0000000000 0.0000000000 #> ENSG00000000419 1.475649e-03 0.0019898441 0.0011007460 0.0013637987 #> ENSG00000000457 6.159013e-04 0.0008243284 0.0006150451 0.0006147833 #> ENSG00000000460 1.960829e-04 0.0001568963 0.0002006156 0.0001610786 #> ENSG00000000938 2.513883e-06 0.0000000000 0.0000000000 0.0000000000  # Option B: Write to a new assay slot se2 <- minmax_normalization(se, new_assay_name = \"minmax_counts\")"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"quantile-normalization","dir":"Articles","previous_headings":"Normalization Methods","what":"Quantile Normalization","title":"Normalization Functions","text":"Quantile normalization makes distribution values across samples identical. technique adjusts data rank distributions data across samples equal.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-1-normalize-a-matrix-1","dir":"Articles","previous_headings":"Normalization Methods > Quantile Normalization","what":"Example 1: Normalize a matrix","title":"Normalization Functions","text":"","code":"count_mat <- assay(se)  se_quantile <- quantile_normalization(count_mat)  ## Check result dim((se_quantile)) #> [1] 63677     8 summary(as.vector(se_quantile)) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #>      0.00      0.00      0.00    344.36      9.62 361483.12 head(se_quantile[1:5, 1:5]) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003    690.875    504.750    773.875     613.75   1010.000 #> ENSG00000000005      0.000      0.000      0.000       0.00      0.000 #> ENSG00000000419    468.875    582.375    550.625     552.00    516.875 #> ENSG00000000457    257.375    241.375    225.250     254.00    213.125 #> ENSG00000000460     58.000     65.250     31.500      53.75     67.750"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-2-normalize-a-summarized-experiment","dir":"Articles","previous_headings":"Normalization Methods > Quantile Normalization","what":"Example 2: Normalize a summarized experiment","title":"Normalization Functions","text":"","code":"## Apply quantile normalization to a SummarizedExperiment se_quantile <- quantile_normalization(se)  ## Check result dim(assay(se_quantile)) #> [1] 63677     8 summary(as.vector(assay(se_quantile))) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #>      0.00      0.00      0.00    344.36      9.62 361483.12 head(assay(se_quantile)[1:5, 1:5]) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003    690.875    504.750    773.875     613.75   1010.000 #> ENSG00000000005      0.000      0.000      0.000       0.00      0.000 #> ENSG00000000419    468.875    582.375    550.625     552.00    516.875 #> ENSG00000000457    257.375    241.375    225.250     254.00    213.125 #> ENSG00000000460     58.000     65.250     31.500      53.75     67.750"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"cpm-normalization","dir":"Articles","previous_headings":"Normalization Methods","what":"CPM Normalization","title":"Normalization Functions","text":"cpm_normalization() function rescales raw count data column sums one million. makes count data comparable across samples different sequencing depths.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-1-normalize-a-data-frame","dir":"Articles","previous_headings":"Normalization Methods > CPM Normalization","what":"Example 1: Normalize a data.frame","title":"Normalization Functions","text":"","code":"df <- assay(se) # Normalize without log2-transform df_cpm <- cpm_normalization(df, log_trans = FALSE) head(df_cpm[, 1:5]) #>                 SRR1039508 SRR1039509  SRR1039512 SRR1039513  SRR1039516 #> ENSG00000000003  32.900521  23.817776 34.43970525  26.906868 46.54699807 #> ENSG00000000005   0.000000   0.000000  0.00000000   0.000000  0.00000000 #> ENSG00000000419  22.628193  27.379809 24.49834703  24.071095 24.00974329 #> ENSG00000000457  12.598138  11.217747 10.37530639  10.815506 10.02110240 #> ENSG00000000460   2.907263   2.924057  1.57799337   2.308187  3.19039178 #> ENSG00000000938   0.000000   0.000000  0.07889967   0.000000  0.04090246  # Normalize with log2-transform df_cpm_log <- cpm_normalization(df, log_trans = TRUE) head(df_cpm_log[, 1:5]) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003   5.083236   4.633302  5.1472947   4.802548 5.57128235 #> ENSG00000000005   0.000000   0.000000  0.0000000   0.000000 0.00000000 #> ENSG00000000419   4.562437   4.826793  4.6723318   4.647953 4.64441834 #> ENSG00000000457   3.765337   3.610906  3.5078335   3.562609 3.46219663 #> ENSG00000000460   1.966158   1.972346  1.3662486   1.726041 2.06708514 #> ENSG00000000938   0.000000   0.000000  0.1095607   0.000000 0.05783488"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-2-normalize-a-summarizedexperiment-1","dir":"Articles","previous_headings":"Normalization Methods > CPM Normalization","what":"Example 2: Normalize a SummarizedExperiment","title":"Normalization Functions","text":"","code":"# Apply in-place normalization (overwrite assay) se1 <- cpm_normalization(se, log_trans = FALSE) head(assay(se1)) #>                 SRR1039508 SRR1039509  SRR1039512 SRR1039513  SRR1039516 #> ENSG00000000003  32.900521  23.817776 34.43970525  26.906868 46.54699807 #> ENSG00000000005   0.000000   0.000000  0.00000000   0.000000  0.00000000 #> ENSG00000000419  22.628193  27.379809 24.49834703  24.071095 24.00974329 #> ENSG00000000457  12.598138  11.217747 10.37530639  10.815506 10.02110240 #> ENSG00000000460   2.907263   2.924057  1.57799337   2.308187  3.19039178 #> ENSG00000000938   0.000000   0.000000  0.07889967   0.000000  0.04090246 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000000003  33.973415  40.259015  27.026857 #> ENSG00000000005   0.000000   0.000000   0.000000 #> ENSG00000000419  25.926226  21.802609  24.002873 #> ENSG00000000457  10.740401  12.182273  10.820193 #> ENSG00000000460   2.044246   3.973617   2.834985 #> ENSG00000000938   0.000000   0.000000   0.000000  # Save to a new assay slot se2 <- cpm_normalization(se, log_trans = TRUE, new_assay_name =                              \"cpm_logged\") head(assay(se2, \"cpm_logged\")) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003   5.083236   4.633302  5.1472947   4.802548 5.57128235 #> ENSG00000000005   0.000000   0.000000  0.0000000   0.000000 0.00000000 #> ENSG00000000419   4.562437   4.826793  4.6723318   4.647953 4.64441834 #> ENSG00000000457   3.765337   3.610906  3.5078335   3.562609 3.46219663 #> ENSG00000000460   1.966158   1.972346  1.3662486   1.726041 2.06708514 #> ENSG00000000938   0.000000   0.000000  0.1095607   0.000000 0.05783488 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000000003   5.128187   5.366637   4.808738 #> ENSG00000000005   0.000000   0.000000   0.000000 #> ENSG00000000419   4.750940   4.511127   4.644022 #> ENSG00000000457   3.553410   3.720527   3.563182 #> ENSG00000000460   1.606085   2.314295   1.939221 #> ENSG00000000938   0.000000   0.000000   0.000000"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"rpkm-normalization","dir":"Articles","previous_headings":"Normalization Methods","what":"RPKM Normalization","title":"Normalization Functions","text":"Reads per kilobase per million (RPKM) normalization adjusts gene length sequencing depth, making particularly useful RNA-Seq data. RPKM helps compare gene expression levels across genes different lengths.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-1-normalize-a-data-frame-1","dir":"Articles","previous_headings":"Normalization Methods > RPKM Normalization","what":"Example 1: Normalize a data.frame","title":"Normalization Functions","text":"","code":"df <- assay(se) length <- rowData(se)$gene_seq_end - rowData(se)$gene_seq_start df_rpkm <- rpkm_normalization(df, gene_length = length)  head(df_rpkm[, 1:5]) #>                 SRR1039508 SRR1039509  SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003 2.90614973 2.10385794 3.042108051 2.37672181 4.11156241 #> ENSG00000000005 0.00000000 0.00000000 0.000000000 0.00000000 0.00000000 #> ENSG00000000419 0.95525977 1.15585145 1.034209179 1.01617253 1.01358254 #> ENSG00000000457 0.28224164 0.25131614 0.232442566 0.24230454 0.22450718 #> ENSG00000000460 0.01514389 0.01523137 0.008219743 0.01202331 0.01661870 #> ENSG00000000938 0.00000000 0.00000000 0.003398943 0.00000000 0.00176205"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-2-normalize-a-summarizedexperiment-2","dir":"Articles","previous_headings":"Normalization Methods > RPKM Normalization","what":"Example 2: Normalize a SummarizedExperiment","title":"Normalization Functions","text":"","code":"## Gene length needed rowData(se)$gene_length <- rowData(se)$gene_seq_end - rowData(se)$gene_seq_start  ## Apply RPKM normalization se_rpkm <- rpkm_normalization(se, gene_length, log_trans = TRUE)  ## Check the result dim(assay(se_rpkm))  #> [1] 63677     8 head(assay(se_rpkm)[1:5, 1:5]) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003 1.96574725 1.63406253 2.01510789 1.75562333 2.35376434 #> ENSG00000000005 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #> ENSG00000000419 0.96736029 1.10825777 1.02446804 1.01161910 1.00976461 #> ENSG00000000457 0.35866816 0.32344632 0.30152042 0.31301889 0.29220123 #> ENSG00000000460 0.02168423 0.02180855 0.01181011 0.01724252 0.02377868"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"tpm-normalization","dir":"Articles","previous_headings":"Normalization Methods","what":"TPM Normalization","title":"Normalization Functions","text":"Transcripts per million normalization.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-1-normalize-a-data-frame-2","dir":"Articles","previous_headings":"Normalization Methods > TPM Normalization","what":"Example 1: Normalize a data.frame","title":"Normalization Functions","text":"","code":"df <- assay(se) length <- sample(c(400:800), nrow(df), replace = TRUE) df_tpm <- tpm_normalization(df, gene_length = length)  head(df_tpm[, 1:5]) #>                 SRR1039508 SRR1039509  SRR1039512 SRR1039513  SRR1039516 #> ENSG00000000003  33.390121  24.122006 34.96289802  27.202754 47.35784714 #> ENSG00000000005   0.000000   0.000000  0.00000000   0.000000  0.00000000 #> ENSG00000000419  17.352628  20.952835 18.79251602  18.388476 18.45814018 #> ENSG00000000457   9.547481   8.483696  7.86531621   8.165143  7.61347687 #> ENSG00000000460   3.784083   3.798038  2.05453877   2.992829  4.16299091 #> ENSG00000000938   0.000000   0.000000  0.07636036   0.000000  0.03967295"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"example-2-normalize-a-summarizedexperiment-3","dir":"Articles","previous_headings":"Normalization Methods > TPM Normalization","what":"Example 2: Normalize a SummarizedExperiment","title":"Normalization Functions","text":"","code":"## Gene length needed rowData(se)$gene_length <- rowData(se)$gene_seq_end - rowData(se)$gene_seq_start  ## Apply RPKM normalization se_tpm <- tpm_normalization(se, gene_length, log_trans = TRUE)  ## Check the result dim(assay(se_tpm))  #> [1] 63677     8 head(assay(se_tpm)[1:5, 1:5]) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003  4.4294986  3.9577411 4.55434051  4.2249660  4.8647104 #> ENSG00000000005  0.0000000  0.0000000 0.00000000  0.0000000  0.0000000 #> ENSG00000000419  2.9549906  3.1678707 3.11233806  3.0989031  2.9884095 #> ENSG00000000457  1.5828547  1.4524115 1.44301228  1.4877425  1.3427320 #> ENSG00000000460  0.1467549  0.1443756 0.08513068  0.1237197  0.1553897"},{"path":"https://vanbortlelab.github.io/dominatR/articles/Normalization-Functions.html","id":"session-info","dir":"Articles","previous_headings":"Normalization Methods > TPM Normalization","what":"Session Info","title":"Normalization Functions","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.5.2               dominatRData_0.99.0         #>  [3] airway_1.28.0               SummarizedExperiment_1.38.1 #>  [5] Biobase_2.68.0              GenomicRanges_1.60.0        #>  [7] GenomeInfoDb_1.44.2         IRanges_2.42.0              #>  [9] S4Vectors_0.46.0            BiocGenerics_0.54.0         #> [11] generics_0.1.4              MatrixGenerics_1.20.0       #> [13] matrixStats_1.5.0           dominatR_0.99.0             #> [15] knitr_1.50                  #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6            xfun_0.53               bslib_0.9.0             #>  [4] lattice_0.22-7          tzdb_0.5.0              vctrs_0.6.5             #>  [7] tools_4.5.1             tibble_3.3.0            pkgconfig_2.0.3         #> [10] Matrix_1.7-3            tidyverse_2.0.0         ggnewscale_0.5.2        #> [13] RColorBrewer_1.1-3      desc_1.4.3              lifecycle_1.0.4         #> [16] GenomeInfoDbData_1.2.14 stringr_1.5.2           compiler_4.5.1          #> [19] farver_2.1.2            textshaping_1.0.3       ggforce_0.5.0           #> [22] htmltools_0.5.8.1       sass_0.4.10             yaml_2.3.10             #> [25] tidyr_1.3.1             pillar_1.11.0           pkgdown_2.1.3           #> [28] crayon_1.5.3            jquerylib_0.1.4         MASS_7.3-65             #> [31] DelayedArray_0.34.1     cachem_1.1.0            abind_1.4-8             #> [34] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.7           #> [37] purrr_1.1.0             dplyr_1.1.4             forcats_1.0.0           #> [40] polyclip_1.10-7         fastmap_1.2.0           grid_4.5.1              #> [43] cli_3.6.5               SparseArray_1.8.1       magrittr_2.0.3          #> [46] S4Arrays_1.8.1          readr_2.1.5             withr_3.0.2             #> [49] UCSC.utils_1.4.0        scales_1.4.0            timechange_0.3.0        #> [52] lubridate_1.9.4         rmarkdown_2.29          XVector_0.48.0          #> [55] httr_1.4.7              hms_1.1.3               ragg_1.5.0              #> [58] evaluate_1.0.5          rlang_1.1.6             glue_1.8.0              #> [61] tweenr_2.0.3            jsonlite_2.0.0          R6_2.6.1                #> [64] systemfonts_1.2.3       fs_1.6.6"},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to dominatR","text":"dominatR genomic data visualization package applies concepts drawn physics - center mass classical mechanics Shannon‚Äôs entropy statistical mechanics - effectively visualize features (e.g.¬†genes) present within specific context condition (e.g.¬†tissue-specific gene expression). dominatR able integrate dataframes, matrices SummarizedExperiment objects, perform number common genomic normalization methods, compute center mass, entropy, categorical entropy values, generate customizable plots serve highlight context-relevant feature dominance. examples, dominance visualization linked coordinate spatial localization data point, full feature dominance projected radial extreme. dominatoR package functions can subgrouped following categories: Normalization Functions: Contains basic normalization methods, : cpm_normalization minmax_normalization quantile_normalization rpkm_normalization tpm_normalization Calculation Functions: Contains feature calculation methods, : centmass entropy Qentropy Visualization Functions: Contains three different visualization tools, ideal assessing dominance 2, 3 N Dimension: plot_rope plot_triangle plot_circle vignette serves quick tutorial using dominatR. descriptions examples customization additional features present package can explored companion articles.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"data-normalization-computing-and-plotting-feature-dominance","dir":"Articles","previous_headings":"","what":"Data normalization; computing and plotting feature dominance","title":"Introduction to dominatR","text":"data included vignette can found airway dataset supplementary package dominatRData","code":""},{"path":[]},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"example-1-summarizedexperiment-object","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance > Normalization functions (e.g.¬†quantile normalization)","what":"Example 1: SummarizedExperiment object","title":"Introduction to dominatR","text":"","code":"data(\"airway\")  se = quantile_normalization(airway, new_assay_name = 'quantile_norma')  head(se) #> class: RangedSummarizedExperiment  #> dim: 6 8  #> metadata(1): '' #> assays(2): counts quantile_norma #> rownames(6): ENSG00000000003 ENSG00000000005 ... ENSG00000000460 #>   ENSG00000000938 #> rowData names(10): gene_id gene_name ... seq_coord_system symbol #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample head(assay(se, 'quantile_norma')) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000000003    690.875    504.750    773.875     613.75   1010.000 #> ENSG00000000005      0.000      0.000      0.000       0.00      0.000 #> ENSG00000000419    468.875    582.375    550.625     552.00    516.875 #> ENSG00000000457    257.375    241.375    225.250     254.00    213.125 #> ENSG00000000460     58.000     65.250     31.500      53.75     67.750 #> ENSG00000000938      0.000      0.000      1.250       0.00      0.375 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000000003    757.375    878.250    608.750 #> ENSG00000000005      0.000      0.000      0.000 #> ENSG00000000419    582.125    467.500    541.625 #> ENSG00000000457    244.125    257.375    251.125 #> ENSG00000000460     48.375     79.875     66.000 #> ENSG00000000938      0.000      0.000      0.000"},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"example-2-dataframe-object","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance > Normalization functions (e.g.¬†quantile normalization)","what":"Example 2: dataframe object","title":"Introduction to dominatR","text":"","code":"data(\"atac_tissue_counts\")  ## selecting the numeric columns norm = atac_tissue_counts[,8:26]  norm1 = quantile_normalization(norm)  head(norm1[,1:10]) #>           Heart     Spleen      Liver      Colon Adrenal.Gland       Lung #> [1,]   11.26316   15.36842   13.00000   21.73684     13.789474   11.15789 #> [2,] 1369.78947 2997.36842 1679.36842 1422.52632   1486.421053 1549.94737 #> [3,]   17.78947   32.26316   57.89474   25.15789     21.789474   26.31579 #> [4,]   15.63158   14.78947   19.52632   22.78947      8.263158   15.26316 #> [5,]   17.78947   21.84211   20.84211   21.73684     15.000000   21.36842 #> [6,]   13.52632   18.57895   16.21053   17.89474     10.473684   13.10526 #>         Pancreas Gallbladder Urinary.Tract     Breast #> [1,]    9.052632    11.89474      12.89474   14.26316 #> [2,] 1220.842105  1432.63158    1513.47368 1613.84211 #> [3,]   18.210526    16.84211      17.47368   19.42105 #> [4,]   14.894737    22.10526      14.68421   10.89474 #> [5,]   18.210526    20.00000      22.63158   16.52632 #> [6,]   10.631579    11.89474      25.10526   25.00000"},{"path":[]},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"example-1-summarizedexperiment-object-1","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance > Calculation functions (e.g.¬†entropy)","what":"Example 1: SummarizedExperiment object","title":"Introduction to dominatR","text":"","code":"se = entropy(se)  head(se) #> class: RangedSummarizedExperiment  #> dim: 6 8  #> metadata(1): '' #> assays(3): counts quantile_norma Entropy #> rownames(6): ENSG00000000003 ENSG00000000005 ... ENSG00000000460 #>   ENSG00000000938 #> rowData names(11): gene_id gene_name ... symbol Entropy #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample  ### It creates a new column in the rowData dataframe head(rowData(se)) #> DataFrame with 6 rows and 11 columns #>                         gene_id   gene_name  entrezid   gene_biotype #>                     <character> <character> <integer>    <character> #> ENSG00000000003 ENSG00000000003      TSPAN6        NA protein_coding #> ENSG00000000005 ENSG00000000005        TNMD        NA protein_coding #> ENSG00000000419 ENSG00000000419        DPM1        NA protein_coding #> ENSG00000000457 ENSG00000000457       SCYL3        NA protein_coding #> ENSG00000000460 ENSG00000000460    C1orf112        NA protein_coding #> ENSG00000000938 ENSG00000000938         FGR        NA protein_coding #>                 gene_seq_start gene_seq_end    seq_name seq_strand #>                      <integer>    <integer> <character>  <integer> #> ENSG00000000003       99883667     99894988           X         -1 #> ENSG00000000005       99839799     99854882           X          1 #> ENSG00000000419       49551404     49575092          20         -1 #> ENSG00000000457      169818772    169863408           1         -1 #> ENSG00000000460      169631245    169823221           1          1 #> ENSG00000000938       27938575     27961788           1         -1 #>                 seq_coord_system      symbol   Entropy #>                        <integer> <character> <numeric> #> ENSG00000000003               NA      TSPAN6  2.917466 #> ENSG00000000005               NA        TNMD  0.000000 #> ENSG00000000419               NA        DPM1  2.961022 #> ENSG00000000457               NA       SCYL3  2.975398 #> ENSG00000000460               NA    C1orf112  2.955338 #> ENSG00000000938               NA         FGR  0.918296"},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"example-2-dataframe-object-1","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance > Calculation functions (e.g.¬†entropy)","what":"Example 2: dataframe object","title":"Introduction to dominatR","text":"","code":"norm1 = entropy(norm)  ### It creates a new column in the dataframe head(norm1[,10:20]) #>       Breast Fallopian.Tube Psoas.Muscle  Vena.Cava Gastroesophageal.Sphincter #> 1 0.06137184     0.06859206   0.02166065 0.06137184                 0.05415162 #> 2 0.02719477     0.05415596   0.08358637 0.05121959                 0.04261070 #> 3 0.05176471     0.05176471   0.02117647 0.05647059                 0.04705882 #> 4 0.04362416     0.07046980   0.03020134 0.05369128                 0.04362416 #> 5 0.04679803     0.11576355   0.01970443 0.06896552                 0.05665025 #> 6 0.07715134     0.04747774   0.02373887 0.05934718                 0.08902077 #>   Adipose.Tissue Sciatic.Nerve Ovary...Uterus    Stomach      Brain  Entropy #> 1     0.04332130    0.06498195     0.05415162 0.05415162 0.12635379 4.090040 #> 2     0.03967433    0.06907137     0.07921519 0.02816243 0.03717174 4.137985 #> 3     0.04235294    0.06117647     0.05176471 0.04235294 0.06823529 4.116397 #> 4     0.05704698    0.04362416     0.04697987 0.06711409 0.10402685 4.123750 #> 5     0.04926108    0.04679803     0.03940887 0.04187192 0.11576355 4.071279 #> 6     0.05341246    0.05934718     0.05341246 0.05044510 0.11275964 4.062376"},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"visualization-functions-2--3--and-n-dimensions","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance","what":"Visualization functions (2-, 3-, and N-dimensions)","title":"Introduction to dominatR","text":"dominatR package functions compatible SummarizedExperiment data.frame objects. quick introduction show examples using data.frame objects. function produces graphic data.frame dominance results; setting atribute output_table = FALSE restrict dataframe displayed. details examples usage aesthetics manipulation, refer articles visualization section.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"example-1-two-dimensions-with-plot_rope","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance > Visualization functions (2-, 3-, and N-dimensions)","what":"Example 1: Two Dimensions with plot_rope()","title":"Introduction to dominatR","text":"plot_rope useful visualize feature dominance two variables. example function comparing dominance gene occupancy RNA Polymerase II RNA Polymerase III. default function plots data points, users can adjust entropy_range values subset observations within specified range.  _____________________________ , let‚Äôs filter genes low entropy high significance scores visualize genes specifically occupied either RNA Pol II RNA Pol III  _____________________________ , let‚Äôs filter genes high entropy high significance scores visualize genes specifically occupied RNA Pol II RNA Pol III","code":"data(\"rnapol_score\")  data1 <- rnapol_score[,6:7]  plot_rope(         data1,          rope_color = 'white',         pch = c(21, 21),          push_text = 1.2,         col = c('#7eb1d5', '#fa8451'),         output_table = FALSE,         rope_width = 1 )  title(main = 'Gene Occupancy RNA Pol II vs RNA Pol III',         font.main = 1,          cex = 0.5) plot_rope(         data1,          rope_color = 'white',         pch = c(21, 21),          col = c('#7eb1d5', '#fa8451'),         push_text = 1.2,         output_table = FALSE,         rope_width = 1,         entropyrange = c(0, 0.5),         maxvaluerange = c(1.3, Inf) )   title(main = 'Gene Occupancy \\n RNA Pol II vs RNA Pol III - Specific',         font.main = 1,          cex = 0.5) plot_rope(         data1,         pch = c(21,21),          push_text = 1.2,         rope_color = 'white',         col = c('#7eb1d5', '#fa8451'),         output_table = FALSE,         rope_width = 1,         entropyrange = c(0.8, 1),         maxvaluerange = c(1.3, Inf) )  title(main = 'Gene Occupancy \\n RNA Pol II vs RNA Pol III - Shared',         font.main = 1,          cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"example-2-three-dimensions-with-plot_triangle","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance > Visualization functions (2-, 3-, and N-dimensions)","what":"Example 2: Three Dimensions with plot_triangle()","title":"Introduction to dominatR","text":"plot_triange useful visualize feature dominance three variables. example, function comparing dominance gene occupancy RNA Polymerase , RNA Polymerase II RNA Polymerase III. default function plots every data point, users can adjust entropy_range attribute values subset observations within specified range.  _____________________________ , let‚Äôs filter genes low entropy high significance scores visualize genes specifically occupied either RNA Pol , RNA Pol II, RNA Pol III  _____________________________ , let‚Äôs filter genes high entropy high significance scores visualize genes specifically occupied three RNA Pols combinations 2 RNA Pols (e.g.¬†RNA Pol RNA Pol II)  Notice data point gets closer center (moving away vertices), observation characterized higher entropy dominated specific variable (case, specific RNA polymerase).","code":"data1 <- rnapol_score[,5:7]  plot_triangle(data1,                 output_table = FALSE,                 col = c('#ff80e3', '#7eb1d5', '#fa8451'),                 label = TRUE, pch = 21,                  push_text = 1.3)  title(main = 'Gene Occupancy \\n Pol I vs Pol II vs Pol III',         font.main = 1,          cex = 0.5) data1 <- rnapol_score[,5:7]  plot_triangle(data1,                  output_table = FALSE,                  col = c('#ff80e3', '#7eb1d5', '#fa8451'),                 entropyrange = c(0,0.5),                 label = TRUE, pch = 21,                 push_text = 1.3)  title(main = 'Gene Occupancy \\n Pol I vs Pol II vs Pol III - Specific',         font.main = 1,          cex = 0.5) data1 <- rnapol_score[,5:7]  plot_triangle(data1,                  output_table = FALSE,                  col = c('#ff80e3', '#7eb1d5', '#fa8451'),                 entropyrange = c(1.5, Inf),                 label = TRUE, pch = 21,                 push_text = 1.3)  title(main = 'Gene Occupancy \\n Pol I vs Pol II vs Pol III - Shared',         font.main = 1,          cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"example-3-n-dimensions-with-plot_circle","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance > Visualization functions (2-, 3-, and N-dimensions)","what":"Example 3: N-Dimensions with plot_circle()","title":"Introduction to dominatR","text":"plot_circle useful visualize feature dominance N-Numbers variables. example, function comparing RNA-Pol III transcribed genes accessibility across tissues. default function plots points, user can adjust entropy_range values subsetting specific type observations. Briefly total P-1 (P = Number Variables) circles plotted represent degrees dominance. outtermost circle represents observations dominated one variable. second outtermost circle represents observations dominated two variables. innermost circle represents observations uniform across variables.","code":"data(\"atac_tissue_score\")  ### subsetting only a set of numerical columns data1 = atac_tissue_score[,8:26]   plot_circle(data1,              point_line_colors = rep('black', 19),             magnituderange = c(1, Inf),             n = 19,              output_table = FALSE,              point_size = 3) +  ggtitle('Pol III transcribed genes \\n accessibility across tissues') data(\"atac_tissue_score\")   plot_circle(data1,              point_line_colors = rep('black', 19),             entropyrange = c(0,1),              magnituderange = c(1, Inf),             straight_points = FALSE,              n = 19,              output_table = FALSE,              point_size = 3) +  ggtitle('Pol III transcribed genes \\n accessibility across tissues - Unique') data(\"atac_tissue_score\")  plot_circle(data1,              point_line_colors = rep('black', 19),             entropyrange = c(4, Inf),             magnituderange = c(1, Inf),             n = 19,              output_table = FALSE,             point_size = 3) +  ggtitle('Pol III transcribed genes \\n accessibility across tissues - Shared')"},{"path":"https://vanbortlelab.github.io/dominatR/articles/dominatR.html","id":"session-info","dir":"Articles","previous_headings":"Data normalization; computing and plotting feature dominance","what":"Session Info","title":"Introduction to dominatR","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.5.2               airway_1.28.0               #>  [3] SummarizedExperiment_1.38.1 Biobase_2.68.0              #>  [5] GenomicRanges_1.60.0        GenomeInfoDb_1.44.2         #>  [7] IRanges_2.42.0              S4Vectors_0.46.0            #>  [9] BiocGenerics_0.54.0         generics_0.1.4              #> [11] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [13] dominatRData_0.99.0         dominatR_0.99.0             #> [15] knitr_1.50                  #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6            xfun_0.53               bslib_0.9.0             #>  [4] lattice_0.22-7          tzdb_0.5.0              vctrs_0.6.5             #>  [7] tools_4.5.1             tibble_3.3.0            pkgconfig_2.0.3         #> [10] Matrix_1.7-3            tidyverse_2.0.0         ggnewscale_0.5.2        #> [13] RColorBrewer_1.1-3      desc_1.4.3              lifecycle_1.0.4         #> [16] GenomeInfoDbData_1.2.14 stringr_1.5.2           compiler_4.5.1          #> [19] farver_2.1.2            textshaping_1.0.3       ggforce_0.5.0           #> [22] htmltools_0.5.8.1       sass_0.4.10             yaml_2.3.10             #> [25] tidyr_1.3.1             pillar_1.11.0           pkgdown_2.1.3           #> [28] crayon_1.5.3            jquerylib_0.1.4         MASS_7.3-65             #> [31] DelayedArray_0.34.1     cachem_1.1.0            abind_1.4-8             #> [34] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.7           #> [37] purrr_1.1.0             dplyr_1.1.4             labeling_0.4.3          #> [40] forcats_1.0.0           polyclip_1.10-7         fastmap_1.2.0           #> [43] grid_4.5.1              cli_3.6.5               SparseArray_1.8.1       #> [46] magrittr_2.0.3          S4Arrays_1.8.1          readr_2.1.5             #> [49] withr_3.0.2             UCSC.utils_1.4.0        scales_1.4.0            #> [52] timechange_0.3.0        lubridate_1.9.4         rmarkdown_2.29          #> [55] XVector_0.48.0          httr_1.4.7              hms_1.1.3               #> [58] ragg_1.5.0              evaluate_1.0.5          rlang_1.1.6             #> [61] glue_1.8.0              tweenr_2.0.3            jsonlite_2.0.0          #> [64] R6_2.6.1                systemfonts_1.2.3       fs_1.6.6"},{"path":"https://vanbortlelab.github.io/dominatR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Lizarazo. Author, maintainer. Ethan Chen. Contributor. Rajendra K C. Contributor. Kevin Van Bortle. Contributor.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lizarazo S (2025). dominatR: Feature Dominance-based R Package Genomic Data. R package version 0.99.0, https://github.com/VanBortleLab/dominatR.","code":"@Manual{,   title = {dominatR: Feature Dominance-based R Package for Genomic Data},   author = {Simon Lizarazo},   year = {2025},   note = {R package version 0.99.0},   url = {https://github.com/VanBortleLab/dominatR}, }"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"overview","dir":"","previous_headings":"","what":"Feature Dominance-based R Package for Genomic Data","title":"Feature Dominance-based R Package for Genomic Data","text":"dominatR genomic data visualization package R. brief, dominatR applies concepts drawn physics - center mass classical mechanics Shannon‚Äôs entropy statistical mechanics - effectively visualize features (e.g.¬†genes) present within specific context condition (e.g.¬†tissue-specific gene expression). dominatR able integrate dataframes, matrices SummarizedExperiment objects, perform number common genomic normalization methods, compute center mass, entropy, categorical entropy values, generate customizable plots serve highlight context-relevant feature dominance. examples, dominance visualization linked coordinate spatial localization data point, full feature dominance projected radial extreme. , highlight utility dominatR specific examples, three-way (triangle) visualization RNA polymerase , II, III genomic occupancy dominance enzyme-specific gene targets (Rajendra K C et al., 2024 Molecular Cell), 19-way (circular) visualization tissue-specific gene accessibility patterns canonical RNA Pol III-transcribed genes (Simon Lizarazo et al., 2025 bioRxiv preprint).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Feature Dominance-based R Package for Genomic Data","text":"Built-normalization methods: desired, feature counts can normalized across conditions using built-functions quantile normalization, min-max normalization, counts per million (CPM), reads per kb per million (RPKM), transcript per million (TPM). Categorical entropy calculation: Quickly identify features specific particular category condition, well features relatively uniform across conditions. Feature dominance plots: Generate informative customizable plots highlight feature dominance, aiding data interpretation communication. 2 dimensions N dimensions.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Dominance-based R Package for Genomic Data","text":"dominatR can installed GitHub using devtools package:","code":"# Install devtools if not already installed if (!require(devtools)) install.packages(\"devtools\")  # Install dominatR from GitHub devtools::install_github(\"VanBortleLab/dominatR\", build_vignettes = TRUE)"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Feature Dominance-based R Package for Genomic Data","text":"","code":"#load libraries library('dominatR') library('dominatRData') library('SummarizedExperiment') library('airway')"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"normalization","dir":"","previous_headings":"","what":"Normalization","title":"Feature Dominance-based R Package for Genomic Data","text":"normalization, package able integrate dataframes summarized experiment objects. using dataframe recommend numerical one. summarizedexperiment object can provide name assay want normalize new assay name store normalized data using assay_nname new_assay_name attributes respectively. provided, first assay object replaced.","code":"data(airway)  ##Saving the summarizedexperiment as se se = airway  ##Preparing the matrix count_mat <- assay(se)"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"a-dataframematrix","dir":"","previous_headings":"Normalization","what":"A dataframe/matrix","title":"Feature Dominance-based R Package for Genomic Data","text":"","code":"count_min <- quantile_normalization(count_mat)"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"a-summarized-experiment","dir":"","previous_headings":"Normalization","what":"A summarized experiment","title":"Feature Dominance-based R Package for Genomic Data","text":"","code":"# Option A: Overwrite the default assay se1 <- quantile_normalization(se)  # Option B: Write to a new assay slot se2 <- quantile_normalization(se, new_assay_name = \"quantile_counts\")"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"feature-dominance-plots","dir":"","previous_headings":"","what":"Feature dominance plots","title":"Feature Dominance-based R Package for Genomic Data","text":"principle feature dominance plots follows idea observations dominated variable located close proximity edge respective shape. plots provide many aesthetic attributes filter genes based entropy scores magnitude values along coloring dataframe retrieval containing information related analysis.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"two-dimensions---plot_rope","dir":"","previous_headings":"Feature dominance plots","what":"Two dimensions - plot_rope","title":"Feature Dominance-based R Package for Genomic Data","text":"Observations lie center line shared across two variables. Observations lie extreme line dominated respective variable","code":"data(\"rnapol_score\")  # Subsetting the two columns of interest, can also be specified in the function by  # calling the names of those columns data1 <- rnapol_score[,6:7]  # The plot_rope function plot_rope(         data1,          rope_color = 'white',         pch = c(21, 21),          col = c('#7eb1d5', '#fa8451'),         push_text = 1.2,         output_table = FALSE,         rope_width = 1,         entropyrange = c(0, 0.5),         maxvaluerange = c(1.3, Inf) )   title(main = 'Gene Occupancy \\n RNA Pol II vs RNA Pol III - Specific',         font.main = 1,          cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"three-dimensions---plot_triangle","dir":"","previous_headings":"Feature dominance plots","what":"Three dimensions - plot_triangle","title":"Feature Dominance-based R Package for Genomic Data","text":"Observations lie center triangle shared across three variables. Observations lie vertices dominated respective variable","code":"data(\"rnapol_score\")  # Subsetting the two columns of interest, can also be specified in the function by  # calling the names of those columns data1 = rnapol_score[,5:7]  plot_triangle(data1,                  output_table = FALSE,                  col = c('#ff80e3', '#7eb1d5', '#fa8451'),                 entropyrange = c(0,0.5),                 label = TRUE, pch = 21,                 push_text = 1.3)  title(main = 'Gene Occupancy \\n Pol I vs Pol II vs Pol III - Specific',         font.main = 1,          cex = 0.5)"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"n-dimensions---plot_circle","dir":"","previous_headings":"Feature dominance plots","what":"N-dimensions - plot_circle","title":"Feature Dominance-based R Package for Genomic Data","text":"Observations lie center circle shared across N variables. Observations lie edge circle polygon dominated respective variable","code":"data(\"atac_tissue_score\")  ### subsetting only a set of numerical columns data1 = atac_tissue_score[,8:26]   plot_circle(data1,              point_line_colors = rep('black', 19),             magnituderange = c(1, Inf),             n = 19,              output_table = FALSE,              point_size = 3) +  ggtitle('Pol III transcribed genes \\n accessibility across tissues')"},{"path":"https://vanbortlelab.github.io/dominatR/index.html","id":"note","dir":"","previous_headings":"","what":"Note","title":"Feature Dominance-based R Package for Genomic Data","text":"dominatR serves strictly tool effective data normalization visualization perform significance testing. However, feature-related statistics derived methods may incorporated entropy calculation visualization features noted significance (example, prefiltered gene sets, shown significant RNA Pol , II, III occupancy gene accessibility usage examples noted ).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/Qentropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Q-Entropy using existing row-normalized data + Entropy ‚Äî Qentropy","title":"Compute Q-Entropy using existing row-normalized data + Entropy ‚Äî Qentropy","text":"#' Transform entropy scores categorical entropy scores \\(Q_{ij} = \\mathrm{Entropy}_i - \\log_2(x_{ij})\\), Inf \\(x_{ij} == 0\\). @details row \\(\\) column \\(j\\), \\(Q_{ij}\\) defined \\(\\mathrm{Entropy}_i - \\log_2\\bigl(x_{ij}\\bigr)\\) \\(x_{ij}\\) positive, Inf otherwise.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/Qentropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Q-Entropy using existing row-normalized data + Entropy ‚Äî Qentropy","text":"","code":"Qentropy(x, assay_name = \"Entropy\", new_assay_name = \"Qentropy\")"},{"path":"https://vanbortlelab.github.io/dominatR/reference/Qentropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Q-Entropy using existing row-normalized data + Entropy ‚Äî Qentropy","text":"x data.frame (already processed 'entropy()') SummarizedExperiment (already processed 'entropy()'). assay_name (SummarizedExperiment ) name assay whose row-normalized data replaced Q-values. NULL, uses first assay. new_assay_name prefer store Q-values *new* assay, provide name. default 'Qentropy'","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/Qentropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Q-Entropy using existing row-normalized data + Entropy ‚Äî Qentropy","text":"x data.frame: returns data.frame numeric    columns replaced \\(Q_{ij}\\) values Entropy column removed. x SummarizedExperiment: returns object     specified assay replaced \\(Q_{ij}\\) values (new assay     new_assay_name set) rowData(x)$Entropy removed.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/Qentropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Q-Entropy using existing row-normalized data + Entropy ‚Äî Qentropy","text":"","code":"library(SummarizedExperiment) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‚ÄòMatrixGenerics‚Äô #> The following objects are masked from ‚Äòpackage:matrixStats‚Äô: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: ‚Äògenerics‚Äô #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: ‚ÄòBiocGenerics‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, is.unsorted, lapply, #>     mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     rank, rbind, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‚ÄòS4Vectors‚Äô #> The following object is masked from ‚Äòpackage:utils‚Äô: #>  #>     findMatches #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‚ÄòBiobase‚Äô #> The following object is masked from ‚Äòpackage:MatrixGenerics‚Äô: #>  #>     rowMedians #> The following objects are masked from ‚Äòpackage:matrixStats‚Äô: #>  #>     anyMissing, rowMedians library(airway) data('airway')  se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  # ------------------------------- # 1) Using a data.frame # ------------------------------- df = assay(se) |> as.data.frame()  ## Entropy needs to be calculated first df = entropy(df)  ## Then you can apply the Qentropy function df = Qentropy(df)  head(df) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166        Inf        Inf        Inf        Inf        Inf #> ENSG00000266931        Inf        Inf        Inf        Inf        Inf #> ENSG00000104774   5.954307   5.979072   5.711755   6.640587   6.005811 #> ENSG00000267583        Inf   0.000000        Inf        Inf        Inf #> ENSG00000227581   2.503258        Inf        Inf        Inf        Inf #> ENSG00000227317        Inf        Inf        Inf        Inf        Inf #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000260166        Inf   0.000000        Inf #> ENSG00000266931        Inf        Inf        Inf #> ENSG00000104774   5.732659   6.049651   5.941714 #> ENSG00000267583        Inf        Inf        Inf #> ENSG00000227581   1.503258        Inf        Inf #> ENSG00000227317        Inf        Inf        Inf  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  ## Calculate Entropy first se2 = entropy(se, new_assay_name = 'Entropy')  ## Transform entropy into Qentropy. new_assay_name specify a new assay ## where data is going to be stored. Assay_name must have Entropy transformed values #> new(\"standardGeneric\", .Data = function (x, ...)  #> standardGeneric(\"values\"), generic = \"values\", package = \"S4Vectors\",  #>     group = list(), valueClass = character(0), signature = \"x\",  #>     default = NULL, skeleton = (function (x, ...)  #>     stop(gettextf(\"invalid call in method dispatch to '%s' (no default method)\",  #>         \"values\"), domain = NA))(x, ...)) #> <bytecode: 0x555dc944b918> #> <environment: 0x555dc94406a0> #> attr(,\"generic\") #> [1] \"values\" #> attr(,\"generic\")attr(,\"package\") #> [1] \"S4Vectors\" #> attr(,\"package\") #> [1] \"S4Vectors\" #> attr(,\"group\") #> list() #> attr(,\"valueClass\") #> character(0) #> attr(,\"signature\") #> [1] \"x\" #> attr(,\"default\") #> `\\001NULL\\001` #> attr(,\"skeleton\") #> (function (x, ...)  #> stop(gettextf(\"invalid call in method dispatch to '%s' (no default method)\",  #>     \"values\"), domain = NA))(x, ...) #> attr(,\"class\") #> [1] \"standardGeneric\" #> attr(,\"class\")attr(,\"package\") #> [1] \"methods\" ## By default, the function will look for an assay_name 'Entropy' and assign ## a new assay to 'Qentropy' se2 = Qentropy(se2, new_assay_name = 'Qentropy', assay_name = 'Entropy')  se2 #> class: RangedSummarizedExperiment  #> dim: 1000 8  #> metadata(1): '' #> assays(3): counts Entropy Qentropy #> rownames(1000): ENSG00000260166 ENSG00000266931 ... ENSG00000160886 #>   ENSG00000142871 #> rowData names(11): gene_id gene_name ... symbol Entropy #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample"},{"path":"https://vanbortlelab.github.io/dominatR/reference/centmass.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ","title":"Compute the ","text":"row numeric data, centmass() computes 2D center mass coordinates (comx, comy). x_coord y_coord vectors specify location column's \"mass.\" original usage assumes ternary coordinate system default, can generalized scenario columns represent discrete \"masses\" known (x,y) positions. default, x_coord = c(0, 1, 0.5) y_coord = c(0, 0, sqrt(3)/2), correspond corners equilateral triangle (often used ternary plots).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/centmass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ","text":"","code":"centmass(   x,   x_coord = c(0, 1, 0.5),   y_coord = c(0, 0, sqrt(3)/2),   assay_name = NULL )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/centmass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ","text":"x data.frame (numeric columns) SummarizedExperiment. x_coord Numeric vector length equal number columns x, specifying x-coordinates column's mass. y_coord Numeric vector length equal number columns x, specifying y-coordinates column's mass. assay_name x SummarizedExperiment, name assay use. Defaults first assay specified.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/centmass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the ","text":"x data.frame, returns new data.frame     columns comx comy. x SummarizedExperiment, returns object     two new columns comx comy rowData(x).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/centmass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the ","text":"","code":"library(SummarizedExperiment) library(airway) data('airway')  se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  # Let's subset for the first 3 columns for this example se = se[,1:3] # ------------------------------- # 1) Using a data.frame # -------------------------------   df = assay(se) |> as.data.frame()  df = centmass(df) head(df) #>                      comx      comy #> ENSG00000260166 0.0000000 0.0000000 #> ENSG00000266931 0.0000000 0.0000000 #> ENSG00000104774 0.4973123 0.3236133 #> ENSG00000267583 1.0000000 0.0000000 #> ENSG00000227581 0.0000000 0.0000000 #> ENSG00000227317 0.0000000 0.0000000  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  se2 = centmass(se)  ## X and Y coordinates are stored in rowData(se2) head(rowData(se2)) #> DataFrame with 6 rows and 12 columns #>                         gene_id      gene_name  entrezid   gene_biotype #>                     <character>    <character> <integer>    <character> #> ENSG00000260166 ENSG00000260166  RP11-863P13.6        NA        lincRNA #> ENSG00000266931 ENSG00000266931 RP11-1252D15.1        NA     pseudogene #> ENSG00000104774 ENSG00000104774         MAN2B1        NA protein_coding #> ENSG00000267583 ENSG00000267583  RP11-322E11.5        NA        lincRNA #> ENSG00000227581 ENSG00000227581   RP13-140E4.1        NA     pseudogene #> ENSG00000227317 ENSG00000227317          DDAH2        NA protein_coding #>                 gene_seq_start gene_seq_end       seq_name seq_strand #>                      <integer>    <integer>    <character>  <integer> #> ENSG00000260166       88120993     88121538             16          1 #> ENSG00000266931       87282781     87282923              2         -1 #> ENSG00000104774       12757325     12777556             19         -1 #> ENSG00000267583       33023833     33047052             18         -1 #> ENSG00000227581       89294212     89294833              X         -1 #> ENSG00000227317       31676987     31680566 HSCHR6_MHC_DBB         -1 #>                 seq_coord_system         symbol      comx      comy #>                        <integer>    <character> <numeric> <numeric> #> ENSG00000260166               NA  RP11-863P13.6  0.000000  0.000000 #> ENSG00000266931               NA RP11-1252D15.1  0.000000  0.000000 #> ENSG00000104774               NA         MAN2B1  0.497312  0.323613 #> ENSG00000267583               NA  RP11-322E11.5  1.000000  0.000000 #> ENSG00000227581               NA   RP13-140E4.1  0.000000  0.000000 #> ENSG00000227317               NA          DDAH2  0.000000  0.000000"},{"path":"https://vanbortlelab.github.io/dominatR/reference/cpm_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts Per Million normalization ‚Äî cpm_normalization","title":"Counts Per Million normalization ‚Äî cpm_normalization","text":"Normalizes count matrix (SummarizedExperiment assay) counts-per-million (CPM) method. Specifically: log_trans = TRUE, log2(x + 1) transform     applied afterward.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/cpm_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts Per Million normalization ‚Äî cpm_normalization","text":"","code":"cpm_normalization(   x,   log_trans = FALSE,   assay_name = NULL,   new_assay_name = NULL )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/cpm_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts Per Million normalization ‚Äî cpm_normalization","text":"x matrix, data.frame, SummarizedExperiment object. log_trans Logical. TRUE, apply log2(... + 1) transform CPM-normalized values. assay_name x SummarizedExperiment, name assay normalize (defaults first assay). Ignored otherwise. new_assay_name x SummarizedExperiment, name new assay results stored (defaults NULL, meaning existing assay overwritten).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/cpm_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts Per Million normalization ‚Äî cpm_normalization","text":"x matrix data.frame, returns       matrix CPM-normalized (optionally       log2-transformed) counts. x SummarizedExperiment, returns       SummarizedExperiment object specified assay replaced       new assay created containing CPM-normalized data.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/cpm_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts Per Million normalization ‚Äî cpm_normalization","text":"","code":"library(SummarizedExperiment) library(airway) data('airway')  se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  # ------------------------------- # 1) Using a data.frame # -------------------------------  df = assay(se)  ## Without log transformation df1 = cpm_normalization(df, log_trans = FALSE)  df1[1:5,1:5] #>                  SRR1039508  SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000266931    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000104774 5619.915194 6926.148938   5283.511   5153.449   4574.527 #> ENSG00000267583    0.000000    3.633866      0.000      0.000      0.000 #> ENSG00000227581    2.898358    0.000000      0.000      0.000      0.000  ## With log transformation df1 = cpm_normalization(df, log_trans = TRUE)  df1[1:5,1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166   0.000000   0.000000    0.00000     0.0000    0.00000 #> ENSG00000266931   0.000000   0.000000    0.00000     0.0000    0.00000 #> ENSG00000104774  12.456589  12.758046   12.36755    12.3316   12.15972 #> ENSG00000267583   0.000000   2.212216    0.00000     0.0000    0.00000 #> ENSG00000227581   1.962866   0.000000    0.00000     0.0000    0.00000  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  # If now new_assay_name is provided, then overwrites existing assay se2 = cpm_normalization(se, log_trans = FALSE)  se2 #> class: RangedSummarizedExperiment  #> dim: 1000 8  #> metadata(1): '' #> assays(1): counts #> rownames(1000): ENSG00000260166 ENSG00000266931 ... ENSG00000160886 #>   ENSG00000142871 #> rowData names(10): gene_id gene_name ... seq_coord_system symbol #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample head(assay(se2)) #>                  SRR1039508  SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000266931    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000104774 5619.915194 6926.148938   5283.511   5153.449   4574.527 #> ENSG00000267583    0.000000    3.633866      0.000      0.000      0.000 #> ENSG00000227581    2.898358    0.000000      0.000      0.000      0.000 #> ENSG00000227317    0.000000    0.000000      0.000      0.000      0.000 #>                  SRR1039517  SRR1039520 SRR1039521 #> ENSG00000260166    0.000000    2.941825      0.000 #> ENSG00000266931    0.000000    0.000000      0.000 #> ENSG00000104774 4681.508353 5339.413106   5846.607 #> ENSG00000267583    0.000000    0.000000      0.000 #> ENSG00000227581    4.141095    0.000000      0.000 #> ENSG00000227317    0.000000    0.000000      0.000  # If new new_assay_name, normalization stored in a new object se2 = cpm_normalization(se, log_trans = FALSE, new_assay_name = 'cpm_counts')  se2 #> class: RangedSummarizedExperiment  #> dim: 1000 8  #> metadata(1): '' #> assays(2): counts cpm_counts #> rownames(1000): ENSG00000260166 ENSG00000266931 ... ENSG00000160886 #>   ENSG00000142871 #> rowData names(10): gene_id gene_name ... seq_coord_system symbol #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample head(assay(se2, 'cpm_counts')) #>                  SRR1039508  SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000266931    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000104774 5619.915194 6926.148938   5283.511   5153.449   4574.527 #> ENSG00000267583    0.000000    3.633866      0.000      0.000      0.000 #> ENSG00000227581    2.898358    0.000000      0.000      0.000      0.000 #> ENSG00000227317    0.000000    0.000000      0.000      0.000      0.000 #>                  SRR1039517  SRR1039520 SRR1039521 #> ENSG00000260166    0.000000    2.941825      0.000 #> ENSG00000266931    0.000000    0.000000      0.000 #> ENSG00000104774 4681.508353 5339.413106   5846.607 #> ENSG00000267583    0.000000    0.000000      0.000 #> ENSG00000227581    4.141095    0.000000      0.000 #> ENSG00000227317    0.000000    0.000000      0.000  # A specific assay can also be selected new_matrix =  matrix(data = sample(x = seq(1, 100000),                                   size = nrow(se) * ncol(se),                                   replace = TRUE),                     nrow = nrow(se),                     ncol = ncol(se)) rownames(new_matrix) = rownames(se) colnames(new_matrix) = colnames(se)  ## Creating a new assay called new counts assay(se, 'new_counts') = new_matrix  se2 = cpm_normalization(se, new_assay_name = 'cpm_counts_new', assay_name = 'new_counts')  se2 #> class: RangedSummarizedExperiment  #> dim: 1000 8  #> metadata(1): '' #> assays(3): counts new_counts cpm_counts_new #> rownames(1000): ENSG00000260166 ENSG00000266931 ... ENSG00000160886 #>   ENSG00000142871 #> rowData names(10): gene_id gene_name ... seq_coord_system symbol #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample head(assay(se2, 'cpm_counts_new')) #>                 SRR1039508  SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166  1141.3733 1890.808811  1645.2655  1189.9281  631.97134 #> ENSG00000266931  1121.4267 1551.266667  1588.4316  1824.4034   61.23701 #> ENSG00000104774    13.7887  791.444090   214.3138  1152.1075 1810.67663 #> ENSG00000267583   361.5750 1293.408505  1005.0427  1573.9907  471.77409 #> ENSG00000227581  1251.8057  444.434935  1897.0876   822.6924 1926.20162 #> ENSG00000227317  1224.5556    4.058587  1860.9976  1947.3654  809.25890 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000260166  1941.9481  348.35798   218.3674 #> ENSG00000266931   181.3972 1338.22321   150.7426 #> ENSG00000104774   626.0270   62.34286   110.5016 #> ENSG00000267583  1327.8193 1091.16225    93.6809 #> ENSG00000227581  1922.3664  777.52252  1766.3156 #> ENSG00000227317  1956.4679 1539.56066   667.7380"},{"path":"https://vanbortlelab.github.io/dominatR/reference/entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Shannon Entropy on row-normalized data ‚Äî entropy","title":"Compute Shannon Entropy on row-normalized data ‚Äî entropy","text":"Compute Shannon Entropy row-normalized data","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Shannon Entropy on row-normalized data ‚Äî entropy","text":"","code":"entropy(x, assay_name = NULL, new_assay_name = \"Entropy\")"},{"path":"https://vanbortlelab.github.io/dominatR/reference/entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Shannon Entropy on row-normalized data ‚Äî entropy","text":"x data.frame (numeric columns) SummarizedExperiment (assay numeric data). assay_name (SummarizedExperiment ) name assay transform compute Entropy . NULL, uses first assay. new_assay_name prefer store Q-values *new* assay, provide name. default 'Entropy'","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Shannon Entropy on row-normalized data ‚Äî entropy","text":"x data.frame: returns data.frame     numeric columns replaced row-wise proportions,     Entropy column appended. x SummarizedExperiment: returns     SummarizedExperiment new assay (Default name Entropy)     rowData(x)$Entropy added.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Shannon Entropy on row-normalized data ‚Äî entropy","text":"","code":"library(SummarizedExperiment) library(airway) data('airway')  se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  # ------------------------------- # 1) Using a data.frame # ------------------------------- df = assay(se) |> as.data.frame() df = entropy(df)  ## The function adds a new column called Entropy and transform all ## the counts accordingly head(df) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166  0.0000000  0.0000000  0.0000000 0.00000000  0.0000000 #> ENSG00000266931  0.0000000  0.0000000  0.0000000 0.00000000  0.0000000 #> ENSG00000104774  0.1271726  0.1250082  0.1504558 0.07903194  0.1227127 #> ENSG00000267583  0.0000000  1.0000000  0.0000000 0.00000000  0.0000000 #> ENSG00000227581  0.3333333  0.0000000  0.0000000 0.00000000  0.0000000 #> ENSG00000227317  0.0000000  0.0000000  0.0000000 0.00000000  0.0000000 #>                 SRR1039517 SRR1039520 SRR1039521   Entropy #> ENSG00000260166  0.0000000  1.0000000  0.0000000 0.0000000 #> ENSG00000266931  0.0000000  0.0000000  0.0000000 0.0000000 #> ENSG00000104774  0.1482915  0.1190398  0.1282875 2.9791667 #> ENSG00000267583  0.0000000  0.0000000  0.0000000 0.0000000 #> ENSG00000227581  0.6666667  0.0000000  0.0000000 0.9182958 #> ENSG00000227317  0.0000000  0.0000000  0.0000000 0.0000000  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  ## The function adds a new assay called 'Entropy' with the transformed ## counts. ## This name can be modified with the 'new_assay_name' parameter ## In the rowData dataframe a new column called Entropy is added. se2 <- entropy(se, new_assay_name = 'Entropy') se2 #> class: RangedSummarizedExperiment  #> dim: 1000 8  #> metadata(1): '' #> assays(2): counts Entropy #> rownames(1000): ENSG00000260166 ENSG00000266931 ... ENSG00000160886 #>   ENSG00000142871 #> rowData names(11): gene_id gene_name ... symbol Entropy #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample  ## In case the experiment has multiple assays, the function allows you to ## choose which assay to use. new_matrix =  matrix(data = sample(x = seq(1, 100000),                                    size = nrow(se) * ncol(se),                                    replace = TRUE),                      nrow = nrow(se),                      ncol = ncol(se)) rownames(new_matrix) = rownames(se) colnames(new_matrix) = colnames(se)  ## Creating a new assay called new counts assay(se, 'new_counts') = new_matrix   ## Saving the entropy values as Entropy_newmatrix using the assay 'new ## counts' se2 = entropy(se,               new_assay_name = 'Entropy_newmatrix',               assay_name = 'new_counts')  se2 #> class: RangedSummarizedExperiment  #> dim: 1000 8  #> metadata(1): '' #> assays(3): counts new_counts Entropy_newmatrix #> rownames(1000): ENSG00000260166 ENSG00000266931 ... ENSG00000160886 #>   ENSG00000142871 #> rowData names(11): gene_id gene_name ... symbol Entropy #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample"},{"path":"https://vanbortlelab.github.io/dominatR/reference/minmax_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Min-Max Normalization ‚Äî minmax_normalization","title":"Min-Max Normalization ‚Äî minmax_normalization","text":"Scales column matrix (SummarizedExperiment assay) minimum value column mapped new_min maximum value mapped new_max","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/minmax_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min-Max Normalization ‚Äî minmax_normalization","text":"","code":"minmax_normalization(   x,   new_min = 0,   new_max = 1,   assay_name = NULL,   new_assay_name = NULL )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/minmax_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min-Max Normalization ‚Äî minmax_normalization","text":"x numeric matrix, data.frame, SummarizedExperiment. new_min lower bound new range (default 0). new_max upper bound new range (default 1). assay_name x SummarizedExperiment, name assay normalize. Defaults first assay none specified. new_assay_name x SummarizedExperiment, name new assay store normalized data. NULL, overwrites assay specified assay_name.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/minmax_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min-Max Normalization ‚Äî minmax_normalization","text":"x data.frame matrix, returns matrix       column-wise scaled values (dimensions x). x SummarizedExperiment, returns       SummarizedExperiment object chosen new assay replaced       scaled values.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/minmax_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Min-Max Normalization ‚Äî minmax_normalization","text":"","code":"library(SummarizedExperiment) library(airway) data('airway')  se <- airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  # ------------------------------- # 1) Using a data.frame # -------------------------------  df <- assay(se)  df1 <- minmax_normalization(df)  apply(df1, 2, range) #>      SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 #> [1,]          0          0          0          0          0          0 #> [2,]          1          1          1          1          1          1 #>      SRR1039520 SRR1039521 #> [1,]          0          0 #> [2,]          1          1  ## Using a new range df1 <- minmax_normalization(df, new_min = 5, new_max = 10)  apply(df1, 2, range) #>      SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 #> [1,]          5          5          5          5          5          5 #> [2,]         10         10         10         10         10         10 #>      SRR1039520 SRR1039521 #> [1,]          5          5 #> [2,]         10         10  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  # If now new_assay_name is provided, then overwrites existing assay se2 <- minmax_normalization(se)  apply(assay(se2), 2, range) #>      SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 #> [1,]          0          0          0          0          0          0 #> [2,]          1          1          1          1          1          1 #>      SRR1039520 SRR1039521 #> [1,]          0          0 #> [2,]          1          1   # If new new_assay_name, normalization stored in a new object se2 <- minmax_normalization(se, new_assay_name = 'minmax_counts')  apply(assay(se2, 'minmax_counts'), 2, range) #>      SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 #> [1,]          0          0          0          0          0          0 #> [2,]          1          1          1          1          1          1 #>      SRR1039520 SRR1039521 #> [1,]          0          0 #> [2,]          1          1  # A specific assay can also be selected new_matrix <-  matrix(data = sample(x = seq(1, 100000),                                    size = nrow(se) * ncol(se),                                    replace = TRUE),                      nrow = nrow(se),                      ncol = ncol(se)) rownames(new_matrix) <- rownames(se) colnames(new_matrix) <- colnames(se)  ## Creating a new assay called new counts assay(se, 'new_counts') <- new_matrix  se2 <- minmax_normalization(se,                            new_assay_name = 'minmax_counts_new',                            assay_name = 'new_counts')  apply(assay(se2, 'minmax_counts_new'), 2, range) #>      SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 #> [1,]          0          0          0          0          0          0 #> [2,]          1          1          1          1          1          1 #>      SRR1039520 SRR1039521 #> [1,]          0          0 #> [2,]          1          1  ## Using a different range se2 <- minmax_normalization(se,                            new_assay_name = 'minmax_counts_new',                            assay_name = 'new_counts',                            new_min = 10,                            new_max = 20)  apply(assay(se2, 'minmax_counts_new'), 2, range) #>      SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 #> [1,]         10         10         10         10         10         10 #> [2,]         20         20         20         20         20         20 #>      SRR1039520 SRR1039521 #> [1,]         10         10 #> [2,]         20         20"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_Triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Triangle (ternary) dominance plot ‚Äî plot_triangle","title":"Triangle (ternary) dominance plot ‚Äî plot_triangle","text":"Creates triangular (ternary) scatter plot **three** numeric variables point coloured variable largest value can filtered () Entropy score ranging (0 1.585) (ii) overall score plot useful visualising ‚Äúwinner-takes-‚Äù behaviour three-way comparisons, e.g. gene expression **, *B*, *C* conditions.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_Triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triangle (ternary) dominance plot ‚Äî plot_triangle","text":"","code":"plot_triangle(   x,   column_name = NULL,   entropyrange = c(0, Inf),   maxvaluerange = c(0, Inf),   col = c(\"darkred\", \"darkgreen\", \"darkblue\"),   background_col = \"whitesmoke\",   output_table = TRUE,   plotAll = TRUE,   cex = 1,   pch = 16,   assay_name = NULL,   label = TRUE,   push_text = 1 )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_Triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triangle (ternary) dominance plot ‚Äî plot_triangle","text":"x numeric data.frame/matrix **** SummarizedExperiment. column_name Character. Names (indices) three columns visualise. NULL, first three numeric columns used. entropyrange Numeric. Keep points whose entropy lies inside interval. Default c(0,Inf) maxvaluerange Numeric. Keep points whose values lies inside interval. Default c(0,Inf) col Character. Colors variable. background_col Character. Color observations outside entropyrange maxvaluerange output_table Logical. TRUE returns processed data frame. plotAll Logical. TRUE, filtered points shown background_col; FALSE, omitted. cex, pch Base-graphics point size / symbol. assay_name (SummarizedExperiment ) assay use. Default: first assay. label Logical. TRUE, label vertices triangle push_text Numeric. Expands contracts text label positions.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_Triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triangle (ternary) dominance plot ‚Äî plot_triangle","text":"output_table = TRUE, data.frame original three columns plus: comx, comy  ‚Äî Cartesian coordinates triangle; color              ‚Äî final plotting colour; entropy            ‚Äî Entropy scores gene; max_counts         ‚Äî Maximum score across variables","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_Triangle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Triangle (ternary) dominance plot ‚Äî plot_triangle","text":"function expects three numeric columns. experiment three columns, name columns interest can specified using  parameter column_name. x  SummarizedExperiment, extracts indicated assay extracts   columns interest also uses:   - centmass() computing comx comy.   - entropy() computing Shannon entropy, stored     entropy column.  three variables, entropy rangeS     0 1.585. ternary vertices fixed \\(( \\sin(0),  \\cos(0) )\\), \\(( \\sin(2\\pi/3),  \\cos(2\\pi/3) )\\) \\(( \\sin(4\\pi/3),  \\cos(4\\pi/3) )\\).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_Triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Triangle (ternary) dominance plot ‚Äî plot_triangle","text":"","code":"library(SummarizedExperiment) library(airway) data('airway') se <- airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  ## Normalize the data first using tpm_normalization rowData(se)$gene_length <- rowData(se)$gene_seq_end -                            rowData(se)$gene_seq_start  se <- tpm_normalization(se, log_trans = TRUE, new_assay_name = 'tpm_norm')  # ------------------------------- # 1) Using a data.frame # -------------------------------  df <- assay(se, 'tpm_norm') |> as.data.frame()   # Choose three columns of interest, in this case 'SRR1039508', 'SRR1039516' # and 'SRR1039512'  # Default Behaviour plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE)   # Colors can be modified plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'))   # Emphasis can be applied to highly dominant variables by controling # entropy parameter, # values outside of that range will be colored smokewhite. plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(0, 0.1))   # Points in the center are a reflection of genes with expression levels = 0. # This can be modified by adjusting the maxvalue range  plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(0, 0.1),               maxvaluerange = c(0.1, Inf))   # By controling entropy range, you can observe different types of genes. # Values closer to 0 represent dominance and closer to 1.6 shareness.  plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(0, 0.4),               maxvaluerange = c(0.1, Inf))  plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(0.4, 1.3),               maxvaluerange = c(0.1, Inf))   plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(1.3, Inf),               maxvaluerange = c(0.1, Inf))   # Same analysis can be performed by filtering out genes with low expression # values  plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(1.2, Inf),               maxvaluerange = c(2, Inf))   plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(1.2, Inf),               maxvaluerange = c(5, Inf))   plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(1.2, Inf),               maxvaluerange = c(10, Inf))   # Background points can be removed plot_triangle(x = df,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('indianred', 'lightgreen', 'lightblue'),               entropyrange = c(1.2, Inf),               maxvaluerange = c(2, Inf),               plotAll = FALSE)  # ------------------------------- # 1) Using a SummarizedExperiment # -------------------------------   plot_triangle(x = se,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('darkred', 'darkgreen', 'darkblue'),               entropyrange = c(0, 0.4),               maxvaluerange = c(0.1, Inf),               assay_name = 'tpm_norm')   plot_triangle(x = se,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('darkred', 'darkgreen', 'darkblue'),               entropyrange = c(0.4, 1.3),               maxvaluerange = c(0.1, Inf),               assay_name = 'tpm_norm')   plot_triangle(x = se,               column_name = c(\"SRR1039508\", \"SRR1039516\", 'SRR1039512'),               output_table = FALSE,               col = c('darkred', 'darkgreen', 'darkblue'),               entropyrange = c(1.3, Inf),               maxvaluerange = c(0.1, Inf),               assay_name = 'tpm_norm')    ### Obtaining the DF output for the analysis  object = plot_triangle(x = se,                        column_name = c(\"SRR1039508\", \"SRR1039516\",                        'SRR1039512'),                        output_table = TRUE,                        col = c('darkred', 'darkgreen', 'darkblue'),                        entropyrange = c(1.3, Inf),                        maxvaluerange = c(0.1, Inf),                        assay_name = 'tpm_norm')  head(object) #>                 max_counts          comx        comy         a         b #> ENSG00000260166   0.000000  0.0000000000 0.000000000 0.0000000 0.0000000 #> ENSG00000266931   0.000000  0.0000000000 0.000000000 0.0000000 0.0000000 #> ENSG00000104774  10.691031 -0.0009644106 0.004970639 0.3366471 0.3311197 #> ENSG00000267583   0.000000  0.0000000000 0.000000000 0.0000000 0.0000000 #> ENSG00000227581   4.845949  0.0000000000 1.000000000 1.0000000 0.0000000 #> ENSG00000227317   0.000000  0.0000000000 0.000000000 0.0000000 0.0000000 #>                         c  Entropy      color #> ENSG00000260166 0.0000000 0.000000 whitesmoke #> ENSG00000266931 0.0000000 0.000000 whitesmoke #> ENSG00000104774 0.3322333 1.584926    darkred #> ENSG00000267583 0.0000000 0.000000 whitesmoke #> ENSG00000227581 0.0000000 0.000000 whitesmoke #> ENSG00000227317 0.0000000 0.000000 whitesmoke"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"Circular Dominance Plot (N ‚â• 3 variables) ‚Äî plot_circle","title":"Circular Dominance Plot (N ‚â• 3 variables) ‚Äî plot_circle","text":"Produces radial dominance plot observation located : Angle (Œ∏) ‚Äì variable greatest value         (ties broken random). Radius (r) ‚Äì monotone mapping row‚Äêwise Shannon         entropy: points low entropy (one variable dominates)         near edge; points high entropy lie toward centre. circle partitioned \\(n\\) coloured slices; optional factor information can colour/jitter points independently.  Labels slice may drawn curved text circle shown legend.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circular Dominance Plot (N ‚â• 3 variables) ‚Äî plot_circle","text":"","code":"plot_circle(   x,   n,   column_variable_factor = NULL,   variables_highlight = NULL,   entropyrange = c(0, Inf),   magnituderange = c(0, Inf),   background_alpha_polygon = 0.05,   background_polygon = NULL,   background_na_polygon = \"whitesmoke\",   point_size = 1,   point_fill_colors = NULL,   point_fill_na_colors = \"whitesmoke\",   point_line_colors = NULL,   point_line_na_colors = \"whitesmoke\",   straight_points = TRUE,   line_col = \"gray90\",   out_line = \"black\",   label = \"legend\",   text_label_curve_size = 3,   assay_name = NULL,   output_table = TRUE )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circular Dominance Plot (N ‚â• 3 variables) ‚Äî plot_circle","text":"x numeric data.frame, matrix, SummarizedExperiment. n Integer (\\(\\ge 3\\)). many numeric variables visualise. Must match length(column_variable_factor) supplied. column_variable_factor Character. Name column (rowData column SummarizedExperiment) holding categorical variable whose levels colour points.  NULL (default) points coloured dominant variable. variables_highlight Character vector naming variables receive curved text labels label = \"curve\". Defaults variables. entropyrange, magnituderange Numeric length-2 vectors. Rows falling outside either interval excluded plot/data. background_alpha_polygon Alpha level (0‚Äì1) coloured background slices. background_polygon Character vector slice fill colours; defaults scales::hue_pal()(n).  background_na_polygon sets colour missing values. background_na_polygon, point_fill_na_colors, point_line_na_colors Sets colour missing values. point_size Numeric; plotted point size. point_fill_colors, point_line_colors Optional colour vectors point fill / outline. straight_points Logical. TRUE points plotted straight line. line_col Colour inner grid / slice borders. out_line Colour outermost circle. label Either \"legend\" (default) list variables legend \"curve\" print around rim. text_label_curve_size Numeric font size curved labels. assay_name (SummarizedExperiment ) assay use. Defaults first assay. output_table Logical.  Also return underlying data frame?","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Circular Dominance Plot (N ‚â• 3 variables) ‚Äî plot_circle","text":"output_table = TRUE list : circle_plot ‚Äî ggplot object; data        ‚Äî augmented data frame containing         entropy, radius, (x,y) coordinates, dominant variable         optional factor. Otherwise ggplot object returned.","code":""},{"path":[]},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle.html","id":"radius-mapping","dir":"Reference","previous_headings":"","what":"Radius mapping","title":"Circular Dominance Plot (N ‚â• 3 variables) ‚Äî plot_circle","text":"linear map used $$ r \\;=\\; 100 \\,\\frac{n - 2^{H}}{n-1} $$ \\(H\\) Shannon entropy row log base 2, \\(H \\[0,\\log_2 n]\\).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circular Dominance Plot (N ‚â• 3 variables) ‚Äî plot_circle","text":"","code":"library(SummarizedExperiment) library(airway) library(tidyverse) #> ‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ #> ‚úî dplyr     1.1.4     ‚úî readr     2.1.5 #> ‚úî forcats   1.0.0     ‚úî stringr   1.5.2 #> ‚úî ggplot2   3.5.2     ‚úî tibble    3.3.0 #> ‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1 #> ‚úî purrr     1.1.0      #> ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ #> ‚úñ lubridate::%within%() masks IRanges::%within%() #> ‚úñ ggplot2::Position()   masks BiocGenerics::Position(), base::Position() #> ‚úñ dplyr::collapse()     masks IRanges::collapse() #> ‚úñ dplyr::combine()      masks Biobase::combine(), BiocGenerics::combine() #> ‚úñ dplyr::count()        masks matrixStats::count() #> ‚úñ dplyr::desc()         masks IRanges::desc() #> ‚úñ tidyr::expand()       masks S4Vectors::expand() #> ‚úñ dplyr::filter()       masks stats::filter() #> ‚úñ dplyr::first()        masks S4Vectors::first() #> ‚úñ dplyr::lag()          masks stats::lag() #> ‚úñ purrr::reduce()       masks GenomicRanges::reduce(), IRanges::reduce() #> ‚úñ dplyr::rename()       masks S4Vectors::rename() #> ‚úñ lubridate::second()   masks S4Vectors::second() #> ‚úñ lubridate::second<-() masks S4Vectors::second<-() #> ‚úñ dplyr::slice()        masks IRanges::slice() #> ‚Ñπ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors data('airway') se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(500, nrow(se))) se <- se[idx, ]  ## Normalize the data first using tpm_normalization rowData(se)$gene_length = rowData(se)$gene_seq_end - rowData(se)$gene_seq_start #>   [1]  -88120993  -87282781  -12757325  -33023833  -89294212  -31676987 #>   [7] -235459180  -17838649  -72042487  -10761177  -28941559 -142124137 #>  [13] -179696098  -15144583  -23089888  -17188208  -72087382   -8941623 #>  [19]   -6128914  -16866251  -26868664 -105501459  -52684257  -21858909 #>  [25]  -16695645  -64550950  -27306656  -30492089  -47720564 -115140430 #>  [31] -153507075 -207080964  -30709030  -49455025  -29811309 -188328957 #>  [37] -129622944  -28825301  -73302061 -187079050  -28699806  -27995979 #>  [43]  -33888558 -132086509  -16309079 -138873841   -4542600  -41271078 #>  [49]  -90048800 -207565789   -7052671  -41757641  -70478577  -15074226 #>  [55]  -39874406  -61470716 -118124118  -54036874 -121829492  -71256158 #>  [61]  -29758816    -926175  -45229248  -47590165  -14683085  -16362309 #>  [67]  -70610204  -30615556  -63904180  -56364902 -114821440 -101462315 #>  [73]  -58563710   -9158422  -75955846  -75598948 -133781578  -63340667 #>  [79] -111179442 -216669454  -14730915   -3411606  -38628029  -16799842 #>  [85]   -8972412 -168720862 -231658134 -216139715  -31654739  -30687978 #>  [91]  -32318107 -177389607  -48013379  -33211032    -228292  -50086067 #>  [97]  -23781213  -29687680  -53317443 -102040595  -67801364  -14531675 #> [103] -127291912  -21760811  -69825198  -39836850  -40110945  -49812902 #> [109]  -11081835 -172582568  -77177778  -19239375  -23785369  -28962606 #> [115]  -14988214  -31455615  -46122503  -58012493  -55954970  -71566815 #> [121]  -12560575 -154795158  -32079238  -48876286  -44754135  -49328797 #> [127]  -95857221  -47407633  -33545496   -7074112  -19985371  -29964122 #> [133] -176762649  -99425636  -10426888   -9860690 -141583849 -124165165 #> [139] -143087382 -194115550 -113886019  -88198893  -24882052  -35441923 #> [145] -133561448  -15978886 -109589700  -29065053  -13752832  -55179002 #> [151]  -45364633 -100150641  -26388172  -31500028  -48046334 -141627157 #> [157]   -4688580  -46642671  -36155221  -67024902  -38077680  -39745930 #> [163]  -55888947  -27983346  -66792382  -19618273 -167584288 -108511433 #> [169]  -25732010  -28654360 -175794949  -60679180 -111727037 -179224597 #> [175]  -80703085  -49993772    -778745  -30030355  -47595218  -77228532 #> [181]  -32336148  -23260304 -240547392  -38426265 -119205237  -21531151 #> [187]  -20697561 -153786077 -208545257  -37820440 -126959811  -25662920 #> [193] -151883082  -86426478 -138710452  -32828155 -151673502  -51568647 #> [199] -157507131 -147688346  -64412212  -29364416  -32718320  -20033158 #> [205]  -75142499  -31368479  -75560749  -93500171  -19901823  -71335563 #> [211] -103749270  -88963992  -45192393  -27391732   -6581407 -140762467 #> [217] -154549247  -17202383 -138269668  -33762485  -38270326   -9811163 #> [223]  -58754814   -9376066  -47799469  -70070478  -45738661  -68266729 #> [229]  -54864227  -28659681  -12111695  -46180719 -131904316  -56467862 #> [235] -143271839 -118894824 -129800674  -33144500 -155305059   -6600914 #> [241] -138818490  -64772226  -98969706  -32537632  -73248920 -149018956 #> [247] -150935507  -64813593 -159792310  -43328004  -25164349   -2615603 #> [253]  -76414714  -45837859  -24204375 -109512836  -74955146  -11944905 #> [259]  -68259872  -47172182  -19111897 -156543270  -24144509  -11998599 #> [265]  -64781654  -31733961  -50937284  -27624416  -45385284 -168625959 #> [271]  -30372300  -20232411  -99386837  -16501106   -9255104  -50080407 #> [277]  -11910633  -75385754  -33316446  -33579823  -67707826 -109244179 #> [283]  -53545427  -42668608   -9546789   -6111336  -71104590   -8754762 #> [289]  -57846106  -73144658  -22007593  -91966408  -29587685  -48276432 #> [295]  -35146491   -3182069 -100625085  -18485541  -52416758  -30344193 #> [301]  -29412457  -73125647  -25181587  -58446019  -30708329  -85594708 #> [307] -132240835 -111322064 -133200348  -43578255  -30715542  -20433355 #> [313] -221056599  -50809639  -43490072   -3568514  -50648438  -30635612 #> [319]  -26900135 -103715540  -69568260  -56720763  -74896728 -197627756 #> [325] -101768604 -174252846  -46126998 -112520900  -64557620  -90286573 #> [331]  -23473154  -33084366  -12035890  -21487968 -203640690  -55155340 #> [337] -238090131 -139334549  -36817318 -159393903  -71991195  -49808176 #> [343]   -5081181  -30359002  -41535013 -154697947  -12919021  -13777574 #> [349]  -50452574 -150690028 -156822542  -87345503 -150954615  -44575673 #> [355] -115720487  -10596796  -31043216 -121133256 -145239296 -102113565 #> [361]  -95860971   -3811317  -31941653   -8818975  -56223701 -144371846 #> [367]  -40361098  -57832290   -3672580  -43124096  -28021006  -33179163 #> [373] -139085251  -32670370  -67726254 -155248063 -182584389 -183814852 #> [379]  -36844393  -33571888  -29113866  -92029174 -216444130 -153769414 #> [385]  -64552393  -90479081  -32272813  -31348188  -70748487    -934342 #> [391]   -9570309  -40736224 -117085336  -74209946 -110608472   -4457959 #> [397]  -22002902    -507299  -16227138  -32936437  -75548822 -131633547 #> [403] -111921078  -81573377  -77540700 -160320218 -117016266 -133320316 #> [409]  -31679548   -7242183  -34960913 -129245835 -153777201 -119600293 #> [415] -122896963  -55609382  -63359095  -45579768  -70514471  -32969203 #> [421]  -91260558  -41514164  -28829201  -71820807   -8019943  -47072628 #> [427]  -46780316  -99324234  -17563020 -157180944  -11653304 -172514219 #> [433]  -50968139  -52807744 -105104916  -30516378 -105750328  -34569648 #> [439]  -44080952  -13378826  -72036639 -118507335  -36921319  -35732332 #> [445]  -33393279 -131078616  -48634408   -4890449  -67840668  -17145878 #> [451]  -52848310 -223741977  -45490715  -70196492  -56152975 -130581186 #> [457] -167148917  -99518147  -88400637  -29340936 -131492065 -151561893 #> [463] -199983817  -59664892  -80444832 -101768122  -89966927  -31581035 #> [469]  -40013593 -130911350  -61211022 -100652475  -70385005  -49932658 #> [475] -148823508 -115624966  -17270258  -92100031 -107074907  -69441858 #> [481]  -31616725  -75013517  -19949081  -11367144  -51601883  -39279811 #> [487]  -46233789  -56214744  -97709633  -32554352 -207731519  -33704939 #> [493] -222909244  -93468277  -91624949  -99391474 -135243898  -70002351 #> [499]  -86626576  -13374755  se = tpm_normalization(se, log_trans = TRUE, new_assay_name = 'tpm_norm')  # ------------------------------- # 1) Using a data.frame # -------------------------------  df <- assay(se, 'tpm_norm') |> as.data.frame()  ## For simplicity let's rename the columns colnames(df) <- paste('Column_', 1:8, sep ='')  # Default plot_circle(   x = df,   n = 8,   entropyrange     = c(0, 3),   magnituderange   = c(0, Inf),   label  = 'legend', output_table = FALSE )   # Filtering by entropy, 8 variables, max entropy value is log2(8) plot_circle(   x = df,   n = 8,   entropyrange     = c(2, 3),   magnituderange   = c(0, Inf),   label  = 'legend', output_table = FALSE )   plot_circle(   x = df,   n = 8,   entropyrange     = c(0, 2),   magnituderange   = c(0, Inf),   label  = 'legend', output_table = FALSE )   # Aesthetics modification plot_circle(   x = df,   n = 8,   entropyrange     = c(0, 2),   magnituderange   = c(0, Inf),   label  = 'curve',   output_table = FALSE )   # It is possible to highlight only a specific variable plot_circle(   x = df,   n = 8,   entropyrange     = c(0, 2),   magnituderange   = c(0, Inf),   label  = 'legend',   output_table = FALSE,   background_alpha_polygon = 0.2,   background_na_polygon = 'transparent',   background_polygon = c('Column_1'  = 'indianred',                          'Column_3' = 'lightblue',                          'Column_5' = 'lightgreen'),   point_fill_colors = c('Column_1'  = 'darkred',                         'Column_3' = 'darkblue',                         'Column_5' = 'darkgreen'),   point_line_colors = c('Column_1'  = 'black',                         'Column_3' = 'black',                         'Column_5' = 'black') )   # Let's create a factor column in our df df$factor <- sample(c('A', 'B', 'C', 'D'), size = nrow(df), replace = TRUE)  # It is possible to visualize things by this specific factor column using # column_variable_factor plot_circle(   x = df,   n = 8,   column_variable_factor = 'factor',   entropyrange     = c(0, 2),   magnituderange   = c(0, Inf),   label  = 'legend',   output_table = FALSE,   background_alpha_polygon = 0.2,   background_na_polygon = 'transparent',   background_polygon = c('Column_1'  = 'indianred',                          'Column_3' = 'lightblue',                          'Column_5' = 'lightgreen') )   # Colors can be modified plot_circle(   x = df,   n = 8,   column_variable_factor = 'factor',   entropyrange     = c(0, 2),   magnituderange   = c(0, Inf),   label  = 'curve',   output_table = FALSE,   background_alpha_polygon = 0.02,   background_na_polygon = 'transparent',   point_fill_colors = c('A' = 'black',                         'B' = 'gray',                         'C' = 'white',                         'D' = 'orange'),   point_line_colors = c('A' = 'black',                         'B' = 'gray',                         'C' = 'white',                         'D' = 'orange') )   # Size of the points can be modified too plot_circle(   x = df,   n = 8,   point_size =  2,   column_variable_factor = 'factor',   entropyrange     = c(0, 2),   magnituderange   = c(0, Inf),   label  = 'curve',   output_table = FALSE,   background_alpha_polygon = 0.02,   background_na_polygon = 'transparent',   point_fill_colors = c('A' = 'black',                         'B' = 'gray',                         'C' = 'white',                         'D' = 'orange'),   point_line_colors = c('A' = 'black',                         'B' = 'gray',                         'C' = 'white',                         'D' = 'orange') )   # Retrieving a dataframe with the results used for plotting, # set output_table <- TRUE plot <- plot_circle(   x = df,   n = 8,   point_size =  2,   column_variable_factor = 'factor',   entropyrange     = c(0, 2),   magnituderange   = c(0, Inf),   label  = 'curve',   output_table = TRUE,   background_alpha_polygon = 0.02,   background_na_polygon = 'transparent',   point_fill_colors = c('A' = 'black',                         'B' = 'gray',                         'C' = 'white',                         'D' = 'orange'),   point_line_colors = c('A' = 'black',                         'B' = 'gray',                         'C' = 'white',                         'D' = 'orange') )   # The first object is the plot plot[[1]]   # The second the dataframe with information for each row, including # Entropy and the variable that dominates that particular observation.   head(plot[[2]]) #>                 Factor   Entropy      col       rad        deg         x #> ENSG00000260166      C 0.0000000 Column_7 100.00000 -3.9269908 -70.71068 #> ENSG00000266931      A 0.0000000 Column_5 100.00000 -2.3561945 -70.71068 #> ENSG00000267583      D 0.0000000 Column_2 100.00000  0.0000000 100.00000 #> ENSG00000227581      B 0.9820371 Column_6  86.06782 -3.1415927 -86.06782 #> ENSG00000227317      A 0.0000000 Column_1 100.00000  0.7853982  70.71068 #> ENSG00000236863      A 0.0000000 Column_5 100.00000 -2.3561945 -70.71068 #>                             y   labels    rand_deg     alpha #> ENSG00000260166  7.071068e+01 Column_7 -3.88335759 1.0000000 #> ENSG00000266931 -7.071068e+01 Column_5 -2.37073890 1.0000000 #> ENSG00000267583  0.000000e+00 Column_2 -0.01454441 1.0000000 #> ENSG00000227581 -1.054027e-14 Column_6 -3.15613706 0.8772454 #> ENSG00000227317  7.071068e+01 Column_1  0.76115748 1.0000000 #> ENSG00000236863 -7.071068e+01 Column_5 -2.35134635 1.0000000    # ------------------------------- # 1) Using a SummarizedExperiment # ------------------------------- # Changing column names colnames(se) <- paste('Column_', 1:8, sep ='')  # Default plot_circle(   x = se,   n = 8,   entropyrange     = c(0, 3),   magnituderange   = c(0, Inf),   label  = 'legend',   output_table = FALSE,   assay_name = 'tpm_norm' )   # Filtering High Entropy genes plot_circle(   x = se,   n = 8,   entropyrange     = c(0, 1.5),   magnituderange   = c(0, Inf),   label  = 'legend',   output_table = FALSE,   assay_name = 'tpm_norm' )   # Filtering Low Entropy genes plot_circle(   x = se,   n = 8,   entropyrange     = c(2, 3),   magnituderange   = c(0, Inf),   label  = 'legend',   output_table = FALSE,   assay_name = 'tpm_norm' )    # Using a character column from rowData  plot_circle(   x = se,   n = 8,   column_variable_factor = 'gene_biotype',   entropyrange     = c(2,3),   magnituderange   = c(0, Inf),   label  = 'legend',   output_table = FALSE,   assay_name = 'tpm_norm' ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'i' in selecting a method for function '[': error in evaluating the argument 'x' in selecting a method for function 'colnames': error in evaluating the argument 'x' in selecting a method for function 'rowData': object 'se' not found  plot_circle(   x = se,   n = 8,   column_variable_factor = 'gene_biotype',   point_size = 3,   entropyrange     = c(0,1.5),   magnituderange   = c(2, Inf),   label  = 'legend',   output_table = FALSE,   assay_name = 'tpm_norm', ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'i' in selecting a method for function '[': error in evaluating the argument 'x' in selecting a method for function 'colnames': error in evaluating the argument 'x' in selecting a method for function 'rowData': object 'se' not found  # Highlighting only a class of interest  plot_circle(   x = se,   n = 8,   column_variable_factor = 'gene_biotype',   point_size = 3,   entropyrange     = c(0,1.5),   magnituderange   = c(2, Inf),   label  = 'legend',   output_table = FALSE,   assay_name = 'tpm_norm',   point_fill_colors = c('miRNA' = 'orange'),   point_line_colors = c('miRNA' = 'orange') ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'i' in selecting a method for function '[': error in evaluating the argument 'x' in selecting a method for function 'colnames': error in evaluating the argument 'x' in selecting a method for function 'rowData': object 'se' not found   # Retrieving a dataframe with the results used for plotting, # set output_table <- TRUE  plot <- plot_circle(   x = se,   n = 8,   column_variable_factor = 'gene_biotype',   point_size = 3,   entropyrange     = c(0,1.5),   magnituderange   = c(2, Inf),   label  = 'legend',   output_table = TRUE,   assay_name = 'tpm_norm',   point_fill_colors = c('miRNA' = 'orange'),   point_line_colors = c('miRNA' = 'orange') ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'i' in selecting a method for function '[': error in evaluating the argument 'x' in selecting a method for function 'colnames': error in evaluating the argument 'x' in selecting a method for function 'rowData': object 'se' not found  # It returns a list. # The first object is the plot plot[[1]]   # The second the dataframe with information for each row, including # Entropy and the variable that dominates that particular observation. head(plot[[2]]) #>                 Factor   Entropy      col       rad        deg         x #> ENSG00000260166      C 0.0000000 Column_7 100.00000 -3.9269908 -70.71068 #> ENSG00000266931      A 0.0000000 Column_5 100.00000 -2.3561945 -70.71068 #> ENSG00000267583      D 0.0000000 Column_2 100.00000  0.0000000 100.00000 #> ENSG00000227581      B 0.9820371 Column_6  86.06782 -3.1415927 -86.06782 #> ENSG00000227317      A 0.0000000 Column_1 100.00000  0.7853982  70.71068 #> ENSG00000236863      A 0.0000000 Column_5 100.00000 -2.3561945 -70.71068 #>                             y   labels    rand_deg     alpha #> ENSG00000260166  7.071068e+01 Column_7 -3.88335759 1.0000000 #> ENSG00000266931 -7.071068e+01 Column_5 -2.37073890 1.0000000 #> ENSG00000267583  0.000000e+00 Column_2 -0.01454441 1.0000000 #> ENSG00000227581 -1.054027e-14 Column_6 -3.15613706 0.8772454 #> ENSG00000227317  7.071068e+01 Column_1  0.76115748 1.0000000 #> ENSG00000236863 -7.071068e+01 Column_5 -2.35134635 1.0000000"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Dominance‚ÄìEntropy Frequency Plot ‚Äî plot_circle_frequency","title":"Dominance‚ÄìEntropy Frequency Plot ‚Äî plot_circle_frequency","text":"Visualises often categorical level ( `Factor` ) dominant given entropy score.  function expects second element list returned plot_circle().","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dominance‚ÄìEntropy Frequency Plot ‚Äî plot_circle_frequency","text":"","code":"plot_circle_frequency(   n,   circle,   single = FALSE,   legend = TRUE,   numb_columns = 1,   filter_class = NULL,   point_size = 2 )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dominance‚ÄìEntropy Frequency Plot ‚Äî plot_circle_frequency","text":"n Integer. Number numeric variables used plot_circle(). circle list returned plot_circle(). single Logical.  TRUE draw one combined panel; otherwise facet Factor. legend Logical.  Show legend plot numb_columns Faceting columns single = FALSE. filter_class Character vector levels keep; NULL keeps . point_size Numeric.  Size jitter points.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dominance‚ÄìEntropy Frequency Plot ‚Äî plot_circle_frequency","text":"list plot_stat ‚Äî ggplot object. data      ‚Äî aggregated frequency table.","code":""},{"path":[]},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_circle_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dominance‚ÄìEntropy Frequency Plot ‚Äî plot_circle_frequency","text":"","code":"library(SummarizedExperiment) library(airway) data('airway') se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  ## Normalize the data first using tpm_normalization rowData(se)$gene_length = rowData(se)$gene_seq_end - rowData(se)$gene_seq_start #>    [1]  -88120993  -87282781  -12757325  -33023833  -89294212  -31676987 #>    [7] -235459180  -17838649  -72042487  -10761177  -28941559 -142124137 #>   [13] -179696098  -15144583  -23089888  -17188208  -72087382   -8941623 #>   [19]   -6128914  -16866251  -26868664 -105501459  -52684257  -21858909 #>   [25]  -16695645  -64550950  -27306656  -30492089  -47720564 -115140430 #>   [31] -153507075 -207080964  -30709030  -49455025  -29811309 -188328957 #>   [37] -129622944  -28825301  -73302061 -187079050  -28699806  -27995979 #>   [43]  -33888558 -132086509  -16309079 -138873841   -4542600  -41271078 #>   [49]  -90048800 -207565789   -7052671  -41757641  -70478577  -15074226 #>   [55]  -39874406  -61470716 -118124118  -54036874 -121829492  -71256158 #>   [61]  -29758816    -926175  -45229248  -47590165  -14683085  -16362309 #>   [67]  -70610204  -30615556  -63904180  -56364902 -114821440 -101462315 #>   [73]  -58563710   -9158422  -75955846  -75598948 -133781578  -63340667 #>   [79] -111179442 -216669454  -14730915   -3411606  -38628029  -16799842 #>   [85]   -8972412 -168720862 -231658134 -216139715  -31654739  -30687978 #>   [91]  -32318107 -177389607  -48013379  -33211032    -228292  -50086067 #>   [97]  -23781213  -29687680  -53317443 -102040595  -67801364  -14531675 #>  [103] -127291912  -21760811  -69825198  -39836850  -40110945  -49812902 #>  [109]  -11081835 -172582568  -77177778  -19239375  -23785369  -28962606 #>  [115]  -14988214  -31455615  -46122503  -58012493  -55954970  -71566815 #>  [121]  -12560575 -154795158  -32079238  -48876286  -44754135  -49328797 #>  [127]  -95857221  -47407633  -33545496   -7074112  -19985371  -29964122 #>  [133] -176762649  -99425636  -10426888   -9860690 -141583849 -124165165 #>  [139] -143087382 -194115550 -113886019  -88198893  -24882052  -35441923 #>  [145] -133561448  -15978886 -109589700  -29065053  -13752832  -55179002 #>  [151]  -45364633 -100150641  -26388172  -31500028  -48046334 -141627157 #>  [157]   -4688580  -46642671  -36155221  -67024902  -38077680  -39745930 #>  [163]  -55888947  -27983346  -66792382  -19618273 -167584288 -108511433 #>  [169]  -25732010  -28654360 -175794949  -60679180 -111727037 -179224597 #>  [175]  -80703085  -49993772    -778745  -30030355  -47595218  -77228532 #>  [181]  -32336148  -23260304 -240547392  -38426265 -119205237  -21531151 #>  [187]  -20697561 -153786077 -208545257  -37820440 -126959811  -25662920 #>  [193] -151883082  -86426478 -138710452  -32828155 -151673502  -51568647 #>  [199] -157507131 -147688346  -64412212  -29364416  -32718320  -20033158 #>  [205]  -75142499  -31368479  -75560749  -93500171  -19901823  -71335563 #>  [211] -103749270  -88963992  -45192393  -27391732   -6581407 -140762467 #>  [217] -154549247  -17202383 -138269668  -33762485  -38270326   -9811163 #>  [223]  -58754814   -9376066  -47799469  -70070478  -45738661  -68266729 #>  [229]  -54864227  -28659681  -12111695  -46180719 -131904316  -56467862 #>  [235] -143271839 -118894824 -129800674  -33144500 -155305059   -6600914 #>  [241] -138818490  -64772226  -98969706  -32537632  -73248920 -149018956 #>  [247] -150935507  -64813593 -159792310  -43328004  -25164349   -2615603 #>  [253]  -76414714  -45837859  -24204375 -109512836  -74955146  -11944905 #>  [259]  -68259872  -47172182  -19111897 -156543270  -24144509  -11998599 #>  [265]  -64781654  -31733961  -50937284  -27624416  -45385284 -168625959 #>  [271]  -30372300  -20232411  -99386837  -16501106   -9255104  -50080407 #>  [277]  -11910633  -75385754  -33316446  -33579823  -67707826 -109244179 #>  [283]  -53545427  -42668608   -9546789   -6111336  -71104590   -8754762 #>  [289]  -57846106  -73144658  -22007593  -91966408  -29587685  -48276432 #>  [295]  -35146491   -3182069 -100625085  -18485541  -52416758  -30344193 #>  [301]  -29412457  -73125647  -25181587  -58446019  -30708329  -85594708 #>  [307] -132240835 -111322064 -133200348  -43578255  -30715542  -20433355 #>  [313] -221056599  -50809639  -43490072   -3568514  -50648438  -30635612 #>  [319]  -26900135 -103715540  -69568260  -56720763  -74896728 -197627756 #>  [325] -101768604 -174252846  -46126998 -112520900  -64557620  -90286573 #>  [331]  -23473154  -33084366  -12035890  -21487968 -203640690  -55155340 #>  [337] -238090131 -139334549  -36817318 -159393903  -71991195  -49808176 #>  [343]   -5081181  -30359002  -41535013 -154697947  -12919021  -13777574 #>  [349]  -50452574 -150690028 -156822542  -87345503 -150954615  -44575673 #>  [355] -115720487  -10596796  -31043216 -121133256 -145239296 -102113565 #>  [361]  -95860971   -3811317  -31941653   -8818975  -56223701 -144371846 #>  [367]  -40361098  -57832290   -3672580  -43124096  -28021006  -33179163 #>  [373] -139085251  -32670370  -67726254 -155248063 -182584389 -183814852 #>  [379]  -36844393  -33571888  -29113866  -92029174 -216444130 -153769414 #>  [385]  -64552393  -90479081  -32272813  -31348188  -70748487    -934342 #>  [391]   -9570309  -40736224 -117085336  -74209946 -110608472   -4457959 #>  [397]  -22002902    -507299  -16227138  -32936437  -75548822 -131633547 #>  [403] -111921078  -81573377  -77540700 -160320218 -117016266 -133320316 #>  [409]  -31679548   -7242183  -34960913 -129245835 -153777201 -119600293 #>  [415] -122896963  -55609382  -63359095  -45579768  -70514471  -32969203 #>  [421]  -91260558  -41514164  -28829201  -71820807   -8019943  -47072628 #>  [427]  -46780316  -99324234  -17563020 -157180944  -11653304 -172514219 #>  [433]  -50968139  -52807744 -105104916  -30516378 -105750328  -34569648 #>  [439]  -44080952  -13378826  -72036639 -118507335  -36921319  -35732332 #>  [445]  -33393279 -131078616  -48634408   -4890449  -67840668  -17145878 #>  [451]  -52848310 -223741977  -45490715  -70196492  -56152975 -130581186 #>  [457] -167148917  -99518147  -88400637  -29340936 -131492065 -151561893 #>  [463] -199983817  -59664892  -80444832 -101768122  -89966927  -31581035 #>  [469]  -40013593 -130911350  -61211022 -100652475  -70385005  -49932658 #>  [475] -148823508 -115624966  -17270258  -92100031 -107074907  -69441858 #>  [481]  -31616725  -75013517  -19949081  -11367144  -51601883  -39279811 #>  [487]  -46233789  -56214744  -97709633  -32554352 -207731519  -33704939 #>  [493] -222909244  -93468277  -91624949  -99391474 -135243898  -70002351 #>  [499]  -86626576  -13374755  -51007290  -15105832  -35535631  -32846948 #>  [505] -227916240 -208051441 -133733487 -132795360  -51675020  -28994461 #>  [511] -200284563  -50887461  -74122661  -41321107  -53970989 -120081475 #>  [517] -164647583  -48198636  -22972532  -89553057  -42847356  -33357416 #>  [523]  -47422521  -21919351  -51131624 -153325594 -179220981  -45123770 #>  [529]  -19841408 -111303218  -55996371  -29777040  -47676246 -150782181 #>  [535]  -78820606  -99933702  -53569859  -59927160  -21960468 -149305910 #>  [541]  -55409405    -756175  -95610280  -54840803  -32809834  -10708677 #>  [547] -173978405  -96212279  -23492745  -11292423  -94806447  -40479776 #>  [553]  -69863007  -47208001  -54822087  -21581798 -133918175 -189463518 #>  [559]  -71239462  -15492166  -26325463 -125551344  -58358435  -22323334 #>  [565]  -28527013  -56796883  -65122238  -75713481   -2289725  -44444615 #>  [571]  -86057963  -67263273   -7584802  -73813052  -73931180 -112861197 #>  [577] -196366557  -11943406 -160974069  -40257656  -36607322  -51907612 #>  [583]  -27866680  -80376194  -81272053   -2651372  -15932606 -119994818 #>  [589] -158149737  -22034831  -39975064  -11281388  -40074772 -144043972 #>  [595]  -95655980  -13514519 -129473874 -132374504 -114710405  -27840926 #>  [601]  -64927984  -88781751  -41397900  -79632066  -32742904  -26213377 #>  [607] -166733216  -57496299  -70033894  -29885325 -118602363  -26688623 #>  [613]  -66499743  -39856148 -244538402  -38978676 -139236276 -144470791 #>  [619]  -11410733 -144557036  -71088936 -107032509 -145625476   -8359541 #>  [625]  -29267101  -49067140  -79789454  -31335308  -67789674  -50526670 #>  [631]  -25304275  -11415975  -63303692 -109517591  -93142416 -122321344 #>  [637]   -2767746  -70116806  -19041448  -32252966  -39408473  -16713612 #>  [643]  -38301664  -49768109  -80044031  -77414400  -97700179  -36438698 #>  [649]  -25365594 -111279342  -14153580  -62313471  -66546823 -122489800 #>  [655] -115387607  -74547434 -146085944  -39443285  -21857754  -58985384 #>  [661]  -19726707  -21915047 -147368803  -29213603 -146674857  -94727539 #>  [667]  -92297489  -21727734  -85291866  -43072675 -142531859  -37479778 #>  [673]  -78136555 -112332191  -75179847   -8367011  -21880209  -82443053 #>  [679]  -89141721 -105135116  -22298029 -118281781   -2259254  -19581601 #>  [685]  -84732774  -30964485 -158500336  -90608874  -55738587  -43892596 #>  [691] -113149159  -31654726   -4770682  -23330438  -23116383  -41003201 #>  [697]  -29297452 -125235823 -142233142  -92437000 -149121520 -101389766 #>  [703] -203239655  -53386094 -114514938   -9389124 -151867214  -45535737 #>  [709]  -56922379   -1520790  -81263268  -83739814  -94245747  -52734431 #>  [715]  -40516806  -70503042  -32096994 -140660672 -114900077  -85177105 #>  [721]  -52831526  -62224587  -75552401  -12995237  -31857650  -25082811 #>  [727] -149539777 -100519140  -29765418 -249144205  -70825245   -5082831 #>  [733]  -71407244  -11891612  -65820615  -31162977    -196738 -201966812 #>  [739]  -25218916  -40465342  -43343485  -48886022   -1107636  -30498398 #>  [745]   -7327830  -55182733 -248153569  -45021186  -36874022   -1205708 #>  [751]  -73656471  -40704468  -45140364  -30065837    -584441 -103472343 #>  [757]  -12993227  -38374557  -61986957  -47325601 -161952982   -7571938 #>  [763]  -80247922  -34146507  -95308745 -124490418 -122316634 -100011780 #>  [769] -228735770 -145492601  -19970854  -89066835 -156699884  -32592994 #>  [775]  -55762890  -55102917  -16634518  -77092786  -12407895  -55026196 #>  [781]  -45504688  -93544792   -3875548  -11753359 -133646992 -106351889 #>  [787]   -3194929  -54382247  -68888415  -50766573  -27030215 -102277496 #>  [793]  -35235281 -177229419  -26691378 -133195366  -42298769  -72306396 #>  [799]  -99205497   -2433482  -72039591  -96713905  -27068733  -31157983 #>  [805]  -35759431  -11314304 -101928441  -44527399  -57975928 -101805135 #>  [811] -108183519  -59998045 -197107878  -22548022  -18886731 -183331408 #>  [817]  -74075134  -81001440  -25299357  -41347351 -100795923  -49297286 #>  [823] -152126979 -100081381  -30046174 -147030607    -660337  -43084393 #>  [829] -106511937  -38409766 -184250451  -75133306 -139624624 -120305606 #>  [835] -126512388 -155017667  -64907087 -121974941  -30103885 -121986062 #>  [841] -110318481 -159614374 -192769701 -179405852 -103131609  -31191683 #>  [847]  -21752643 -144519825  -41086244  -87173497  -16413687  -56085783 #>  [853]   -4999933  -55680797   -3688140 -102176843  -83318984 -145372975 #>  [859] -106494135   -6693782  -45784167  -24411377 -156126145  -74424713 #>  [865] -146673130  -71787166 -103515981   -3728645  -58272352 -206698210 #>  [871]  -37154246  -27467501 -100068762  -49754517  -86740882 -109338861 #>  [877]  -27778950  -98680418 -112396384  -95918245  -44798777  -34084330 #>  [883]  -21751118  -15532319  -39378846  -20884802  -26573480  -30864238 #>  [889]  -42881776  -94873638     -47225  -62437745  -72700732  -49264000 #>  [895] -107449179  -83087381  -72114632  -27687116 -104973237  -18570942 #>  [901]  -36554476  -19690056  -56210102 -114691203  -86047558  -30651450 #>  [907] -108535752    -928257  -49581850  -50337321  -90644085  -77316233 #>  [913]  -73641085  -82466565  -64701943 -170140210  -30462766 -100551034 #>  [919]  -30178473   -6067037   -9928411  -55608429 -138137542  -69402902 #>  [925]  -25196528 -207507142  -11157029 -120025573  -31535410  -23673224 #>  [931]  -87354967  -22338213  -41925356  -89065324  -22634861 -157297428 #>  [937] -132269316  -19520895  -57570240  -43824008  -50402491 -104140093 #>  [943]  -20883146  -75581367 -238778547  -29706410  -47566590  -49840684 #>  [949] -116917840 -191857365  -40425969  -72416119  -31815830  -76481258 #>  [955]  -49397103  -17433942  -43290742 -124882361  -48231338  -35896290 #>  [961]  -33059284   -8428173 -120969303  -46188475   -8640864 -155255323 #>  [967]  -47134527  -56960419   -2517930  -10106673  -30467330   -4610073 #>  [973]  -82031576 -101874174 -119033140   -1247566 -128598439  -69512348 #>  [979] -141562660  -42889337  -33629119  -22844930  -46117312 -173472607 #>  [985]  -44609616  -29846028 -100537190 -142510271  -29420987  -41681580 #>  [991]  -37436018  -10163226 -158122928  -30349902 -100792472  -45915480 #>  [997]   -7876569  -85614197 -143781529  -86046444  se = tpm_normalization(se, log_trans = TRUE, new_assay_name = 'tpm_norm')  ## Creating a plot_circle list using the 'gene_biotype' column as factor plot_test <- plot_circle(  x = se,  n = 8,  column_variable_factor = 'gene_biotype',  entropyrange     = c(0,Inf),  magnituderange   = c(0, Inf),  label  = 'legend',  output_table = TRUE,  assay_name = 'tpm_norm' ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'i' in selecting a method for function '[': error in evaluating the argument 'x' in selecting a method for function 'colnames': error in evaluating the argument 'x' in selecting a method for function 'rowData': object 'se' not found  ## Using the plot_test object created above ## Default plot <- plot_circle_frequency(n = 8,                      circle = plot_test,                      single = TRUE,                      legend = TRUE,                      numb_columns = 1,                      filter_class = NULL,                      point_size = 2) #> Error: object 'plot_test' not found  plot[[1]] #> Error in plot[[1]]: object of type 'closure' is not subsettable  ## Facetting by factor is possible, adjusting the number of columns plot <- plot_circle_frequency(n = 8,                      circle = plot_test,                      single = FALSE,                      legend = TRUE,                      numb_columns = 3,                      filter_class = NULL,                      point_size = 2) #> Error: object 'plot_test' not found  plot[[1]] #> Error in plot[[1]]: object of type 'closure' is not subsettable  ## Subsetting by a specific class present in Factor plot_circle_frequency(n = 8,                      circle = plot_test,                      single = FALSE,                      legend = TRUE,                      numb_columns = 1,                      filter_class = c('protein_coding', 'snoRNA', 'miRNA'),                      point_size = 2) #> Error: object 'plot_test' not found  plot[[1]] #> Error in plot[[1]]: object of type 'closure' is not subsettable"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_rope.html","id":null,"dir":"Reference","previous_headings":"","what":"Rope (binary) dominance plot ‚Äî plot_rope","title":"Rope (binary) dominance plot ‚Äî plot_rope","text":"Creates rope-like visualization comparing two numeric columns (e.g., \"\" vs. \"b\"), optional color filtering based maximum value range entropy range. plot useful visualising ‚Äúwinner-takes-‚Äù behaviour two-way comparisons, e.g. gene expression ** *B* conditions.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_rope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rope (binary) dominance plot ‚Äî plot_rope","text":"","code":"plot_rope(   x,   column_name = NULL,   push_text = 1,   rope_width = 1,   rope_color = \"#CCCCCCCC\",   rope_border = TRUE,   col = c(\"red\", \"blue\"),   col_bg = \"whitesmoke\",   pch = c(21, 21),   pch_bg = 19,   cex = 1,   entropyrange = c(0, Inf),   maxvaluerange = c(0, Inf),   plotAll = TRUE,   label = TRUE,   output_table = TRUE,   assay_name = NULL )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_rope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rope (binary) dominance plot ‚Äî plot_rope","text":"x data.frame matrix numeric columns, SummarizedExperiment containing data one assays. column_name Character. name two variables used analysis. default NULL. push_text Numeric. Expands contracts text label positions along x-axis. rope_width Numeric. Thickness \"rope\" drawn center. rope_color Character. Color rope's fill. rope_border Logical color. Whether draw rope border. col Character vector length 2. Colors assigned > b b > , respectively. col_bg Background color (used row filtered entropy max value). pch Integer vector specifying point types main two categories. pch_bg Integer specifying point type \"gray\" points (plotAll=TRUE). cex Numeric. Expansion factor point size. entropyrange Numeric vector length 2. Rows entropy outside range become background color. maxvaluerange Numeric vector length 2. Rows max(,b) outside range become background color. plotAll Logical. TRUE, also draw \"filtered\" points col_bg color. FALSE, highlight active points. label Logical. TRUE, label two columns near rope ends. output_table Logical. TRUE, return processed data frame added columns. assay_name (SummarizedExperiment ) Name assay containing 2-column data. specified, first assay used.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_rope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rope (binary) dominance plot ‚Äî plot_rope","text":"output_table=TRUE, returns data frame extra       columns (comx, comy, color, maxvalue,       entropy) used plot. output_table=FALSE, invisibly returns NULL.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_rope.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rope (binary) dominance plot ‚Äî plot_rope","text":"function expects two numeric columns. experiment two columns, name columns interest can specificed using parameter column_name. x SummarizedExperiment, extracts indicated assay extracts columns interest also uses:   - centmass() computing comx.   - entropy() computing Shannon entropy, stored   entropy column.  two variables, entropy rangeS 0   1. rope drawn middle plot (x-axis -1 1, y = 0), thickness rope_width. Points scattered comy direction bit jitter within rope.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/plot_rope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rope (binary) dominance plot ‚Äî plot_rope","text":"","code":"library(SummarizedExperiment) library(airway) data('airway') se <- airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  ## Normalize the data first using tpm_normalization  rowData(se)$gene_length = rowData(se)$gene_seq_end - rowData(se)$gene_seq_start #>    [1]  -88120993  -87282781  -12757325  -33023833  -89294212  -31676987 #>    [7] -235459180  -17838649  -72042487  -10761177  -28941559 -142124137 #>   [13] -179696098  -15144583  -23089888  -17188208  -72087382   -8941623 #>   [19]   -6128914  -16866251  -26868664 -105501459  -52684257  -21858909 #>   [25]  -16695645  -64550950  -27306656  -30492089  -47720564 -115140430 #>   [31] -153507075 -207080964  -30709030  -49455025  -29811309 -188328957 #>   [37] -129622944  -28825301  -73302061 -187079050  -28699806  -27995979 #>   [43]  -33888558 -132086509  -16309079 -138873841   -4542600  -41271078 #>   [49]  -90048800 -207565789   -7052671  -41757641  -70478577  -15074226 #>   [55]  -39874406  -61470716 -118124118  -54036874 -121829492  -71256158 #>   [61]  -29758816    -926175  -45229248  -47590165  -14683085  -16362309 #>   [67]  -70610204  -30615556  -63904180  -56364902 -114821440 -101462315 #>   [73]  -58563710   -9158422  -75955846  -75598948 -133781578  -63340667 #>   [79] -111179442 -216669454  -14730915   -3411606  -38628029  -16799842 #>   [85]   -8972412 -168720862 -231658134 -216139715  -31654739  -30687978 #>   [91]  -32318107 -177389607  -48013379  -33211032    -228292  -50086067 #>   [97]  -23781213  -29687680  -53317443 -102040595  -67801364  -14531675 #>  [103] -127291912  -21760811  -69825198  -39836850  -40110945  -49812902 #>  [109]  -11081835 -172582568  -77177778  -19239375  -23785369  -28962606 #>  [115]  -14988214  -31455615  -46122503  -58012493  -55954970  -71566815 #>  [121]  -12560575 -154795158  -32079238  -48876286  -44754135  -49328797 #>  [127]  -95857221  -47407633  -33545496   -7074112  -19985371  -29964122 #>  [133] -176762649  -99425636  -10426888   -9860690 -141583849 -124165165 #>  [139] -143087382 -194115550 -113886019  -88198893  -24882052  -35441923 #>  [145] -133561448  -15978886 -109589700  -29065053  -13752832  -55179002 #>  [151]  -45364633 -100150641  -26388172  -31500028  -48046334 -141627157 #>  [157]   -4688580  -46642671  -36155221  -67024902  -38077680  -39745930 #>  [163]  -55888947  -27983346  -66792382  -19618273 -167584288 -108511433 #>  [169]  -25732010  -28654360 -175794949  -60679180 -111727037 -179224597 #>  [175]  -80703085  -49993772    -778745  -30030355  -47595218  -77228532 #>  [181]  -32336148  -23260304 -240547392  -38426265 -119205237  -21531151 #>  [187]  -20697561 -153786077 -208545257  -37820440 -126959811  -25662920 #>  [193] -151883082  -86426478 -138710452  -32828155 -151673502  -51568647 #>  [199] -157507131 -147688346  -64412212  -29364416  -32718320  -20033158 #>  [205]  -75142499  -31368479  -75560749  -93500171  -19901823  -71335563 #>  [211] -103749270  -88963992  -45192393  -27391732   -6581407 -140762467 #>  [217] -154549247  -17202383 -138269668  -33762485  -38270326   -9811163 #>  [223]  -58754814   -9376066  -47799469  -70070478  -45738661  -68266729 #>  [229]  -54864227  -28659681  -12111695  -46180719 -131904316  -56467862 #>  [235] -143271839 -118894824 -129800674  -33144500 -155305059   -6600914 #>  [241] -138818490  -64772226  -98969706  -32537632  -73248920 -149018956 #>  [247] -150935507  -64813593 -159792310  -43328004  -25164349   -2615603 #>  [253]  -76414714  -45837859  -24204375 -109512836  -74955146  -11944905 #>  [259]  -68259872  -47172182  -19111897 -156543270  -24144509  -11998599 #>  [265]  -64781654  -31733961  -50937284  -27624416  -45385284 -168625959 #>  [271]  -30372300  -20232411  -99386837  -16501106   -9255104  -50080407 #>  [277]  -11910633  -75385754  -33316446  -33579823  -67707826 -109244179 #>  [283]  -53545427  -42668608   -9546789   -6111336  -71104590   -8754762 #>  [289]  -57846106  -73144658  -22007593  -91966408  -29587685  -48276432 #>  [295]  -35146491   -3182069 -100625085  -18485541  -52416758  -30344193 #>  [301]  -29412457  -73125647  -25181587  -58446019  -30708329  -85594708 #>  [307] -132240835 -111322064 -133200348  -43578255  -30715542  -20433355 #>  [313] -221056599  -50809639  -43490072   -3568514  -50648438  -30635612 #>  [319]  -26900135 -103715540  -69568260  -56720763  -74896728 -197627756 #>  [325] -101768604 -174252846  -46126998 -112520900  -64557620  -90286573 #>  [331]  -23473154  -33084366  -12035890  -21487968 -203640690  -55155340 #>  [337] -238090131 -139334549  -36817318 -159393903  -71991195  -49808176 #>  [343]   -5081181  -30359002  -41535013 -154697947  -12919021  -13777574 #>  [349]  -50452574 -150690028 -156822542  -87345503 -150954615  -44575673 #>  [355] -115720487  -10596796  -31043216 -121133256 -145239296 -102113565 #>  [361]  -95860971   -3811317  -31941653   -8818975  -56223701 -144371846 #>  [367]  -40361098  -57832290   -3672580  -43124096  -28021006  -33179163 #>  [373] -139085251  -32670370  -67726254 -155248063 -182584389 -183814852 #>  [379]  -36844393  -33571888  -29113866  -92029174 -216444130 -153769414 #>  [385]  -64552393  -90479081  -32272813  -31348188  -70748487    -934342 #>  [391]   -9570309  -40736224 -117085336  -74209946 -110608472   -4457959 #>  [397]  -22002902    -507299  -16227138  -32936437  -75548822 -131633547 #>  [403] -111921078  -81573377  -77540700 -160320218 -117016266 -133320316 #>  [409]  -31679548   -7242183  -34960913 -129245835 -153777201 -119600293 #>  [415] -122896963  -55609382  -63359095  -45579768  -70514471  -32969203 #>  [421]  -91260558  -41514164  -28829201  -71820807   -8019943  -47072628 #>  [427]  -46780316  -99324234  -17563020 -157180944  -11653304 -172514219 #>  [433]  -50968139  -52807744 -105104916  -30516378 -105750328  -34569648 #>  [439]  -44080952  -13378826  -72036639 -118507335  -36921319  -35732332 #>  [445]  -33393279 -131078616  -48634408   -4890449  -67840668  -17145878 #>  [451]  -52848310 -223741977  -45490715  -70196492  -56152975 -130581186 #>  [457] -167148917  -99518147  -88400637  -29340936 -131492065 -151561893 #>  [463] -199983817  -59664892  -80444832 -101768122  -89966927  -31581035 #>  [469]  -40013593 -130911350  -61211022 -100652475  -70385005  -49932658 #>  [475] -148823508 -115624966  -17270258  -92100031 -107074907  -69441858 #>  [481]  -31616725  -75013517  -19949081  -11367144  -51601883  -39279811 #>  [487]  -46233789  -56214744  -97709633  -32554352 -207731519  -33704939 #>  [493] -222909244  -93468277  -91624949  -99391474 -135243898  -70002351 #>  [499]  -86626576  -13374755  -51007290  -15105832  -35535631  -32846948 #>  [505] -227916240 -208051441 -133733487 -132795360  -51675020  -28994461 #>  [511] -200284563  -50887461  -74122661  -41321107  -53970989 -120081475 #>  [517] -164647583  -48198636  -22972532  -89553057  -42847356  -33357416 #>  [523]  -47422521  -21919351  -51131624 -153325594 -179220981  -45123770 #>  [529]  -19841408 -111303218  -55996371  -29777040  -47676246 -150782181 #>  [535]  -78820606  -99933702  -53569859  -59927160  -21960468 -149305910 #>  [541]  -55409405    -756175  -95610280  -54840803  -32809834  -10708677 #>  [547] -173978405  -96212279  -23492745  -11292423  -94806447  -40479776 #>  [553]  -69863007  -47208001  -54822087  -21581798 -133918175 -189463518 #>  [559]  -71239462  -15492166  -26325463 -125551344  -58358435  -22323334 #>  [565]  -28527013  -56796883  -65122238  -75713481   -2289725  -44444615 #>  [571]  -86057963  -67263273   -7584802  -73813052  -73931180 -112861197 #>  [577] -196366557  -11943406 -160974069  -40257656  -36607322  -51907612 #>  [583]  -27866680  -80376194  -81272053   -2651372  -15932606 -119994818 #>  [589] -158149737  -22034831  -39975064  -11281388  -40074772 -144043972 #>  [595]  -95655980  -13514519 -129473874 -132374504 -114710405  -27840926 #>  [601]  -64927984  -88781751  -41397900  -79632066  -32742904  -26213377 #>  [607] -166733216  -57496299  -70033894  -29885325 -118602363  -26688623 #>  [613]  -66499743  -39856148 -244538402  -38978676 -139236276 -144470791 #>  [619]  -11410733 -144557036  -71088936 -107032509 -145625476   -8359541 #>  [625]  -29267101  -49067140  -79789454  -31335308  -67789674  -50526670 #>  [631]  -25304275  -11415975  -63303692 -109517591  -93142416 -122321344 #>  [637]   -2767746  -70116806  -19041448  -32252966  -39408473  -16713612 #>  [643]  -38301664  -49768109  -80044031  -77414400  -97700179  -36438698 #>  [649]  -25365594 -111279342  -14153580  -62313471  -66546823 -122489800 #>  [655] -115387607  -74547434 -146085944  -39443285  -21857754  -58985384 #>  [661]  -19726707  -21915047 -147368803  -29213603 -146674857  -94727539 #>  [667]  -92297489  -21727734  -85291866  -43072675 -142531859  -37479778 #>  [673]  -78136555 -112332191  -75179847   -8367011  -21880209  -82443053 #>  [679]  -89141721 -105135116  -22298029 -118281781   -2259254  -19581601 #>  [685]  -84732774  -30964485 -158500336  -90608874  -55738587  -43892596 #>  [691] -113149159  -31654726   -4770682  -23330438  -23116383  -41003201 #>  [697]  -29297452 -125235823 -142233142  -92437000 -149121520 -101389766 #>  [703] -203239655  -53386094 -114514938   -9389124 -151867214  -45535737 #>  [709]  -56922379   -1520790  -81263268  -83739814  -94245747  -52734431 #>  [715]  -40516806  -70503042  -32096994 -140660672 -114900077  -85177105 #>  [721]  -52831526  -62224587  -75552401  -12995237  -31857650  -25082811 #>  [727] -149539777 -100519140  -29765418 -249144205  -70825245   -5082831 #>  [733]  -71407244  -11891612  -65820615  -31162977    -196738 -201966812 #>  [739]  -25218916  -40465342  -43343485  -48886022   -1107636  -30498398 #>  [745]   -7327830  -55182733 -248153569  -45021186  -36874022   -1205708 #>  [751]  -73656471  -40704468  -45140364  -30065837    -584441 -103472343 #>  [757]  -12993227  -38374557  -61986957  -47325601 -161952982   -7571938 #>  [763]  -80247922  -34146507  -95308745 -124490418 -122316634 -100011780 #>  [769] -228735770 -145492601  -19970854  -89066835 -156699884  -32592994 #>  [775]  -55762890  -55102917  -16634518  -77092786  -12407895  -55026196 #>  [781]  -45504688  -93544792   -3875548  -11753359 -133646992 -106351889 #>  [787]   -3194929  -54382247  -68888415  -50766573  -27030215 -102277496 #>  [793]  -35235281 -177229419  -26691378 -133195366  -42298769  -72306396 #>  [799]  -99205497   -2433482  -72039591  -96713905  -27068733  -31157983 #>  [805]  -35759431  -11314304 -101928441  -44527399  -57975928 -101805135 #>  [811] -108183519  -59998045 -197107878  -22548022  -18886731 -183331408 #>  [817]  -74075134  -81001440  -25299357  -41347351 -100795923  -49297286 #>  [823] -152126979 -100081381  -30046174 -147030607    -660337  -43084393 #>  [829] -106511937  -38409766 -184250451  -75133306 -139624624 -120305606 #>  [835] -126512388 -155017667  -64907087 -121974941  -30103885 -121986062 #>  [841] -110318481 -159614374 -192769701 -179405852 -103131609  -31191683 #>  [847]  -21752643 -144519825  -41086244  -87173497  -16413687  -56085783 #>  [853]   -4999933  -55680797   -3688140 -102176843  -83318984 -145372975 #>  [859] -106494135   -6693782  -45784167  -24411377 -156126145  -74424713 #>  [865] -146673130  -71787166 -103515981   -3728645  -58272352 -206698210 #>  [871]  -37154246  -27467501 -100068762  -49754517  -86740882 -109338861 #>  [877]  -27778950  -98680418 -112396384  -95918245  -44798777  -34084330 #>  [883]  -21751118  -15532319  -39378846  -20884802  -26573480  -30864238 #>  [889]  -42881776  -94873638     -47225  -62437745  -72700732  -49264000 #>  [895] -107449179  -83087381  -72114632  -27687116 -104973237  -18570942 #>  [901]  -36554476  -19690056  -56210102 -114691203  -86047558  -30651450 #>  [907] -108535752    -928257  -49581850  -50337321  -90644085  -77316233 #>  [913]  -73641085  -82466565  -64701943 -170140210  -30462766 -100551034 #>  [919]  -30178473   -6067037   -9928411  -55608429 -138137542  -69402902 #>  [925]  -25196528 -207507142  -11157029 -120025573  -31535410  -23673224 #>  [931]  -87354967  -22338213  -41925356  -89065324  -22634861 -157297428 #>  [937] -132269316  -19520895  -57570240  -43824008  -50402491 -104140093 #>  [943]  -20883146  -75581367 -238778547  -29706410  -47566590  -49840684 #>  [949] -116917840 -191857365  -40425969  -72416119  -31815830  -76481258 #>  [955]  -49397103  -17433942  -43290742 -124882361  -48231338  -35896290 #>  [961]  -33059284   -8428173 -120969303  -46188475   -8640864 -155255323 #>  [967]  -47134527  -56960419   -2517930  -10106673  -30467330   -4610073 #>  [973]  -82031576 -101874174 -119033140   -1247566 -128598439  -69512348 #>  [979] -141562660  -42889337  -33629119  -22844930  -46117312 -173472607 #>  [985]  -44609616  -29846028 -100537190 -142510271  -29420987  -41681580 #>  [991]  -37436018  -10163226 -158122928  -30349902 -100792472  -45915480 #>  [997]   -7876569  -85614197 -143781529  -86046444  se <- tpm_normalization(se, log_trans = TRUE, new_assay_name = 'tpm_norm')  # ------------------------------- # 1) Using a data.frame # -------------------------------  df <- assay(se, 'tpm_norm') df <- as.data.frame(df)  # Choose two columns of interest, in this case 'SRR1039508' # and SRR1039516'  # Default Behaviour plot_rope(df,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE)   # Colors can be modified plot_rope(df,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('darkgreen', 'darkred'))   # Emphasis can be applied to highly dominant variables by controling # entropy parameter, # values outside of that range will be colored smokewhite. plot_rope(df,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('darkgreen', 'darkred'),           entropyrange = c(0,0.1))   # Points in the center are a reflection of genes with expression levels = 0. # This can be modified by adjusting the maxvalue range  plot_rope(df,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('darkgreen', 'darkred'),           entropyrange = c(0,0.1),           maxvaluerange = c(2, Inf))   # By controling entropy range, you can observe different types of genes. # Values closer to 0 represent dominance and closer to 1 shareness.  # Exploring genes with high normalized expression values across different #' entropy ranges    # Looking for genes with a Log2(TPM) score between 4 and 8 plot_rope(df,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('darkgreen', 'darkred'),           entropyrange = c(0,0.1),           maxvaluerange = c(4, 8))    plot_rope(df,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('darkgreen', 'darkred'),           entropyrange = c(0.1,0.8),           maxvaluerange = c(4, 8))    plot_rope(df,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('darkgreen', 'darkred'),           entropyrange = c(0.8,1),           maxvaluerange = c(4, 8))   # ------------------------------- # 1) Using a SummarizedExperiment # -------------------------------  plot_rope(se,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('lightgreen', 'indianred'),           entropyrange = c(0,0.1),           maxvaluerange = c(4, 8))    plot_rope(se,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col =c('lightgreen', 'indianred'),           entropyrange = c(0.1,0.8),           maxvaluerange = c(4, 8))    plot_rope(se,           column_name = c(\"SRR1039508\", \"SRR1039516\"),           output_table = FALSE,           col = c('lightgreen', 'indianred'),           entropyrange = c(0.8,1),           maxvaluerange = c(4, 8))   ### Obtaining the DF output for the analysis  object <- plot_rope(se,                    column_name = c(\"SRR1039508\", \"SRR1039516\"),                    output_table = TRUE,                    col = c('lightgreen', 'indianred'),                    entropyrange = c(0.8,1),                    maxvaluerange = c(4, 8))   head(object) #>                    a    b        comx    comy      color maxvalue   entropy #> ENSG00000260166    0    0  0.00000000  0.0530 whitesmoke        0 0.0000000 #> ENSG00000266931    0    0  0.00000000 -0.1515 whitesmoke        0 0.0000000 #> ENSG00000104774 1939 1871 -0.01784777  0.1435 whitesmoke     1939 0.9997702 #> ENSG00000267583    0    0  0.00000000  0.0600 whitesmoke        0 0.0000000 #> ENSG00000227581    1    0 -1.00000000 -0.0620 whitesmoke        1 0.0000000 #> ENSG00000227317    0    0  0.00000000  0.1700 whitesmoke        0 0.0000000"},{"path":"https://vanbortlelab.github.io/dominatR/reference/quantile_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile Normalization ‚Äî quantile_normalization","title":"Quantile Normalization ‚Äî quantile_normalization","text":"Normalizes read counts quantile normalization method: sample (column) sorted, values rank     averaged across columns sample's values replaced average     respective rank log_trans = TRUE, applies log2(QN + 1)     transformation","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/quantile_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile Normalization ‚Äî quantile_normalization","text":"","code":"quantile_normalization(   x,   log_trans = FALSE,   assay_name = NULL,   new_assay_name = NULL )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/quantile_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile Normalization ‚Äî quantile_normalization","text":"x numeric matrix data.frame gene counts, SummarizedExperiment containing counts. SummarizedExperiment, function applies     normalization specified assay (via assay_name). data.frame/matrix, normalization   applied directly. log_trans Logical. TRUE, apply log2(... + 1) transform quantile-normalized values. assay_name x SummarizedExperiment, name assay normalize. Defaults first assay specified. new_assay_name x SummarizedExperiment, name new assay store quantile-normalized (log2-transformed) values. NULL, overwrites original assay.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/quantile_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile Normalization ‚Äî quantile_normalization","text":"numeric matrix quantile-normalized (log2-normalized)   values x data.frame matrix. x   SummarizedExperiment, returns modified SummarizedExperiment   normalized data placed existing new assay.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/quantile_normalization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantile Normalization ‚Äî quantile_normalization","text":"x SummarizedExperiment, function extract assay using assay_name, apply quantile normalization, return new updated assay. x matrix data.frame, normalization applied directly input matrix.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/quantile_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile Normalization ‚Äî quantile_normalization","text":"","code":"library(SummarizedExperiment) library(airway) data('airway')  se <- airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  # ------------------------------- # 1) Using a data.frame # ------------------------------- df <- assay(se)  ## Without log transformation df_qn <- quantile_normalization(df, log_trans = FALSE) df_qn[1:5, 1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166      0.000      0.000      0.000        0.0       0.00 #> ENSG00000266931      0.000      0.000      0.000        0.0       0.00 #> ENSG00000104774   2164.875   2319.375   1946.875     1971.5    1610.75 #> ENSG00000267583      0.000      0.750      0.000        0.0       0.00 #> ENSG00000227581      0.625      0.000      0.000        0.0       0.00  ## With log transformation df_qn_log <- quantile_normalization(df, log_trans = TRUE) df_qn_log[1:5, 1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166  0.0000000  0.0000000    0.00000    0.00000    0.00000 #> ENSG00000266931  0.0000000  0.0000000    0.00000    0.00000    0.00000 #> ENSG00000104774 11.0807343 11.1801423   10.92769   10.94581   10.65441 #> ENSG00000267583  0.0000000  0.8073549    0.00000    0.00000    0.00000 #> ENSG00000227581  0.7004397  0.0000000    0.00000    0.00000    0.00000  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  ## Overwrite existing assay se2 <- quantile_normalization(se) assay(se2)[1:5, 1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166      0.000      0.000      0.000        0.0       0.00 #> ENSG00000266931      0.000      0.000      0.000        0.0       0.00 #> ENSG00000104774   2164.875   2319.375   1946.875     1971.5    1610.75 #> ENSG00000267583      0.000      0.750      0.000        0.0       0.00 #> ENSG00000227581      0.625      0.000      0.000        0.0       0.00  ## Store result in new assay se3 <- quantile_normalization(se, new_assay_name = \"quant_norm\") assay(se3, \"quant_norm\")[1:5, 1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166      0.000      0.000      0.000        0.0       0.00 #> ENSG00000266931      0.000      0.000      0.000        0.0       0.00 #> ENSG00000104774   2164.875   2319.375   1946.875     1971.5    1610.75 #> ENSG00000267583      0.000      0.750      0.000        0.0       0.00 #> ENSG00000227581      0.625      0.000      0.000        0.0       0.00  ## Use specific input assay (simulate new one) new_matrix <- matrix(   data = sample(x = seq(1, 100000), size = nrow(se) * ncol(se),   replace = TRUE),   nrow = nrow(se),   ncol = ncol(se) ) rownames(new_matrix) <- rownames(se) colnames(new_matrix) <- colnames(se)  ## Create a new assay in the SummarizedExperiment assay(se, \"new_counts\") <- new_matrix  ## Normalize the new assay and store it under a new name se4 <- quantile_normalization(se, assay_name = \"new_counts\", new_assay_name = \"quant_new\") assay(se4, \"quant_new\")[1:5, 1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166   56060.00   94285.88   82647.62   60109.62  32567.250 #> ENSG00000266931   54882.62   76292.25   79960.25   90485.50   3259.625 #> ENSG00000104774     733.25   40996.50    9360.25   58418.00  91851.750 #> ENSG00000267583   19468.50   65204.88   51248.62   78804.12  24111.875 #> ENSG00000227581   61854.62   21166.88   95707.25   40996.50  98769.375"},{"path":"https://vanbortlelab.github.io/dominatR/reference/rpkm_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"RPKM Normalization ‚Äî rpkm_normalization","title":"RPKM Normalization ‚Äî rpkm_normalization","text":"Normalizes read counts RPKM (Reads Per Kilobase per Million mapped reads) method: Normalize counts library size (column sums), scaled millions. Divide gene's value length kilobases. log_trans = TRUE, applies log2(RPKM + 1).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/rpkm_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RPKM Normalization ‚Äî rpkm_normalization","text":"","code":"rpkm_normalization(   x,   gene_length = NULL,   log_trans = FALSE,   assay_name = NULL,   new_assay_name = NULL )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/rpkm_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RPKM Normalization ‚Äî rpkm_normalization","text":"x numeric matrix data.frame gene counts, SummarizedExperiment containing counts. SummarizedExperiment, function retrieves     gene_length rowData(x)$gene_length. data.frame/matrix, user must provide     gene_length argument. gene_length numeric vector gene lengths (one per row), used x data.frame matrix. Must match number rows x. Ignored x SummarizedExperiment. log_trans Logical. TRUE, apply log2(... + 1) transform RPKM-normalized values. assay_name x SummarizedExperiment, name assay normalize. Defaults first assay specified. new_assay_name x SummarizedExperiment, name new assay store RPKM (log2-RPKM). NULL, overwrites assay specified assay_name.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/rpkm_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RPKM Normalization ‚Äî rpkm_normalization","text":"numeric matrix RPKM log2(RPKM + 1) values   x data.frame matrix. x SummarizedExperiment,   returns modified SummarizedExperiment RPKM data placed   existing new assay.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/rpkm_normalization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RPKM Normalization ‚Äî rpkm_normalization","text":"x SummarizedExperiment, function looks numeric column named \"gene_length\" rowData(x). column must length equal number rows assay normalized.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/rpkm_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RPKM Normalization ‚Äî rpkm_normalization","text":"","code":"library(SummarizedExperiment) library(airway) data('airway')  se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  ### Adding a column in rowData regarding the gene_length rowData(se)$gene_length = rowData(se)$gene_seq_end - rowData(se)$gene_seq_start  # ------------------------------- # 1) Using a data.frame # -------------------------------  gene_length = rowData(se)$gene_length df = assay(se)  ## Without log transformation df = rpkm_normalization(df, gene_length = gene_length) df[1:5, 1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166   0.000000   0.000000     0.0000     0.0000     0.0000 #> ENSG00000266931   0.000000   0.000000     0.0000     0.0000     0.0000 #> ENSG00000104774 277.787316 342.353267   261.1592   254.7303   226.1147 #> ENSG00000267583   0.000000   0.156504     0.0000     0.0000     0.0000 #> ENSG00000227581   4.667242   0.000000     0.0000     0.0000     0.0000  ## With log transformation df = rpkm_normalization(df, gene_length = gene_length, log_trans = TRUE) df[1:5, 1:5] #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166   0.000000 0.00000000   0.000000   0.000000   0.000000 #> ENSG00000266931   0.000000 0.00000000   0.000000   0.000000   0.000000 #> ENSG00000104774   6.369221 6.63138416   6.230741   6.186639   6.195829 #> ENSG00000267583   0.000000 0.05532084   0.000000   0.000000   0.000000 #> ENSG00000227581   5.514145 0.00000000   0.000000   0.000000   0.000000  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  # If no new_assay_name is provided, then overwrites existing assay se2 = rpkm_normalization(se, log_trans = FALSE) head(assay(se2)) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166   0.000000   0.000000     0.0000     0.0000     0.0000 #> ENSG00000266931   0.000000   0.000000     0.0000     0.0000     0.0000 #> ENSG00000104774 277.787316 342.353267   261.1592   254.7303   226.1147 #> ENSG00000267583   0.000000   0.156504     0.0000     0.0000     0.0000 #> ENSG00000227581   4.667242   0.000000     0.0000     0.0000     0.0000 #> ENSG00000227317   0.000000   0.000000     0.0000     0.0000     0.0000 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000260166   0.000000   5.397845     0.0000 #> ENSG00000266931   0.000000   0.000000     0.0000 #> ENSG00000104774 231.402716 263.922352   288.9925 #> ENSG00000267583   0.000000   0.000000     0.0000 #> ENSG00000227581   6.668431   0.000000     0.0000 #> ENSG00000227317   0.000000   0.000000     0.0000  # If new_assay_name is given, normalization stored in a new assay se2 = rpkm_normalization(se, log_trans = FALSE, new_assay_name = 'rpkm_counts') head(assay(se2, 'rpkm_counts')) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166   0.000000   0.000000     0.0000     0.0000     0.0000 #> ENSG00000266931   0.000000   0.000000     0.0000     0.0000     0.0000 #> ENSG00000104774 277.787316 342.353267   261.1592   254.7303   226.1147 #> ENSG00000267583   0.000000   0.156504     0.0000     0.0000     0.0000 #> ENSG00000227581   4.667242   0.000000     0.0000     0.0000     0.0000 #> ENSG00000227317   0.000000   0.000000     0.0000     0.0000     0.0000 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000260166   0.000000   5.397845     0.0000 #> ENSG00000266931   0.000000   0.000000     0.0000 #> ENSG00000104774 231.402716 263.922352   288.9925 #> ENSG00000267583   0.000000   0.000000     0.0000 #> ENSG00000227581   6.668431   0.000000     0.0000 #> ENSG00000227317   0.000000   0.000000     0.0000  # Creating a new assay to test specific input new_matrix = matrix(data = sample(x = seq(1, 100000),                                   size = nrow(se) * ncol(se),                                   replace = TRUE),                     nrow = nrow(se),                     ncol = ncol(se)) rownames(new_matrix) = rownames(se) colnames(new_matrix) = colnames(se)  assay(se, 'new_counts') = new_matrix se2 = rpkm_normalization(se, new_assay_name = 'rpkm_counts_new', assay_name = 'new_counts') head(assay(se2, 'rpkm_counts_new')) #>                   SRR1039508  SRR1039509  SRR1039512  SRR1039513 SRR1039516 #> ENSG00000260166 2094.2629240  3469.37396  3018.83571  2183.35424 1159.58044 #> ENSG00000266931 7897.3713086 10924.41315 11186.13827 12847.91118  431.24651 #> ENSG00000104774    0.6815632    39.12036    10.59334    56.94763   89.50011 #> ENSG00000267583   15.5723767    55.70475    43.28536    67.78891   20.31845 #> ENSG00000227581 2015.7901382   715.67622  3054.89145  1324.78648 3101.77395 #> ENSG00000227317  342.1502083     1.13400   519.97698   544.10881  226.11313 #>                 SRR1039517  SRR1039520  SRR1039521 #> ENSG00000260166 3563.20745  639.188949  400.674218 #> ENSG00000266931 1277.44493 9424.107099 1061.567274 #> ENSG00000104774   30.94395    3.081551    5.461995 #> ENSG00000267583   57.18676   46.994369    4.034666 #> ENSG00000227581 3095.59814 1252.049146 2844.308539 #> ENSG00000227317  546.65211  430.165035  186.571110"},{"path":"https://vanbortlelab.github.io/dominatR/reference/tpm_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"TPM Normalization ‚Äî tpm_normalization","title":"TPM Normalization ‚Äî tpm_normalization","text":"Normalizes read counts TPM (Transcripts Per Million) method: log_trans = TRUE, applies log2(TPM + 1).","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/tpm_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TPM Normalization ‚Äî tpm_normalization","text":"","code":"tpm_normalization(   x,   gene_length = NULL,   log_trans = FALSE,   assay_name = NULL,   new_assay_name = NULL )"},{"path":"https://vanbortlelab.github.io/dominatR/reference/tpm_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TPM Normalization ‚Äî tpm_normalization","text":"x numeric matrix data.frame gene counts, SummarizedExperiment containing counts. SummarizedExperiment, function retrieves     gene_length rowData(x)$gene_length. data.frame/matrix, user must provide     gene_length argument. gene_length numeric vector gene lengths (one per row), used x data.frame matrix. Must match number rows x. Ignored x SummarizedExperiment. log_trans Logical. TRUE, apply log2(... + 1) transform TPM-normalized values. assay_name x SummarizedExperiment, name assay normalize. Defaults first assay specified. new_assay_name x SummarizedExperiment, name new assay store TPM (log2-TPM). NULL, overwrites assay specified assay_name.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/tpm_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TPM Normalization ‚Äî tpm_normalization","text":"numeric matrix TPM log2(TPM + 1) values   x data.frame matrix. x SummarizedExperiment,   returns modified SummarizedExperiment TPM data placed   existing new assay.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/tpm_normalization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TPM Normalization ‚Äî tpm_normalization","text":"x SummarizedExperiment, function looks numeric column named \"gene_length\" rowData(x). column must length equal number rows assay normalized.","code":""},{"path":"https://vanbortlelab.github.io/dominatR/reference/tpm_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TPM Normalization ‚Äî tpm_normalization","text":"","code":"library(SummarizedExperiment) library(airway) data('airway')  se = airway  # Only use a random subset of 1000 rows set.seed(123) idx <- sample(seq_len(nrow(se)), size = min(1000, nrow(se))) se <- se[idx, ]  ### Adding a column in rowData regarding the gene_length rowData(se)$gene_length = rowData(se)$gene_seq_end - rowData(se)$gene_seq_start #>    [1]  -88120993  -87282781  -12757325  -33023833  -89294212  -31676987 #>    [7] -235459180  -17838649  -72042487  -10761177  -28941559 -142124137 #>   [13] -179696098  -15144583  -23089888  -17188208  -72087382   -8941623 #>   [19]   -6128914  -16866251  -26868664 -105501459  -52684257  -21858909 #>   [25]  -16695645  -64550950  -27306656  -30492089  -47720564 -115140430 #>   [31] -153507075 -207080964  -30709030  -49455025  -29811309 -188328957 #>   [37] -129622944  -28825301  -73302061 -187079050  -28699806  -27995979 #>   [43]  -33888558 -132086509  -16309079 -138873841   -4542600  -41271078 #>   [49]  -90048800 -207565789   -7052671  -41757641  -70478577  -15074226 #>   [55]  -39874406  -61470716 -118124118  -54036874 -121829492  -71256158 #>   [61]  -29758816    -926175  -45229248  -47590165  -14683085  -16362309 #>   [67]  -70610204  -30615556  -63904180  -56364902 -114821440 -101462315 #>   [73]  -58563710   -9158422  -75955846  -75598948 -133781578  -63340667 #>   [79] -111179442 -216669454  -14730915   -3411606  -38628029  -16799842 #>   [85]   -8972412 -168720862 -231658134 -216139715  -31654739  -30687978 #>   [91]  -32318107 -177389607  -48013379  -33211032    -228292  -50086067 #>   [97]  -23781213  -29687680  -53317443 -102040595  -67801364  -14531675 #>  [103] -127291912  -21760811  -69825198  -39836850  -40110945  -49812902 #>  [109]  -11081835 -172582568  -77177778  -19239375  -23785369  -28962606 #>  [115]  -14988214  -31455615  -46122503  -58012493  -55954970  -71566815 #>  [121]  -12560575 -154795158  -32079238  -48876286  -44754135  -49328797 #>  [127]  -95857221  -47407633  -33545496   -7074112  -19985371  -29964122 #>  [133] -176762649  -99425636  -10426888   -9860690 -141583849 -124165165 #>  [139] -143087382 -194115550 -113886019  -88198893  -24882052  -35441923 #>  [145] -133561448  -15978886 -109589700  -29065053  -13752832  -55179002 #>  [151]  -45364633 -100150641  -26388172  -31500028  -48046334 -141627157 #>  [157]   -4688580  -46642671  -36155221  -67024902  -38077680  -39745930 #>  [163]  -55888947  -27983346  -66792382  -19618273 -167584288 -108511433 #>  [169]  -25732010  -28654360 -175794949  -60679180 -111727037 -179224597 #>  [175]  -80703085  -49993772    -778745  -30030355  -47595218  -77228532 #>  [181]  -32336148  -23260304 -240547392  -38426265 -119205237  -21531151 #>  [187]  -20697561 -153786077 -208545257  -37820440 -126959811  -25662920 #>  [193] -151883082  -86426478 -138710452  -32828155 -151673502  -51568647 #>  [199] -157507131 -147688346  -64412212  -29364416  -32718320  -20033158 #>  [205]  -75142499  -31368479  -75560749  -93500171  -19901823  -71335563 #>  [211] -103749270  -88963992  -45192393  -27391732   -6581407 -140762467 #>  [217] -154549247  -17202383 -138269668  -33762485  -38270326   -9811163 #>  [223]  -58754814   -9376066  -47799469  -70070478  -45738661  -68266729 #>  [229]  -54864227  -28659681  -12111695  -46180719 -131904316  -56467862 #>  [235] -143271839 -118894824 -129800674  -33144500 -155305059   -6600914 #>  [241] -138818490  -64772226  -98969706  -32537632  -73248920 -149018956 #>  [247] -150935507  -64813593 -159792310  -43328004  -25164349   -2615603 #>  [253]  -76414714  -45837859  -24204375 -109512836  -74955146  -11944905 #>  [259]  -68259872  -47172182  -19111897 -156543270  -24144509  -11998599 #>  [265]  -64781654  -31733961  -50937284  -27624416  -45385284 -168625959 #>  [271]  -30372300  -20232411  -99386837  -16501106   -9255104  -50080407 #>  [277]  -11910633  -75385754  -33316446  -33579823  -67707826 -109244179 #>  [283]  -53545427  -42668608   -9546789   -6111336  -71104590   -8754762 #>  [289]  -57846106  -73144658  -22007593  -91966408  -29587685  -48276432 #>  [295]  -35146491   -3182069 -100625085  -18485541  -52416758  -30344193 #>  [301]  -29412457  -73125647  -25181587  -58446019  -30708329  -85594708 #>  [307] -132240835 -111322064 -133200348  -43578255  -30715542  -20433355 #>  [313] -221056599  -50809639  -43490072   -3568514  -50648438  -30635612 #>  [319]  -26900135 -103715540  -69568260  -56720763  -74896728 -197627756 #>  [325] -101768604 -174252846  -46126998 -112520900  -64557620  -90286573 #>  [331]  -23473154  -33084366  -12035890  -21487968 -203640690  -55155340 #>  [337] -238090131 -139334549  -36817318 -159393903  -71991195  -49808176 #>  [343]   -5081181  -30359002  -41535013 -154697947  -12919021  -13777574 #>  [349]  -50452574 -150690028 -156822542  -87345503 -150954615  -44575673 #>  [355] -115720487  -10596796  -31043216 -121133256 -145239296 -102113565 #>  [361]  -95860971   -3811317  -31941653   -8818975  -56223701 -144371846 #>  [367]  -40361098  -57832290   -3672580  -43124096  -28021006  -33179163 #>  [373] -139085251  -32670370  -67726254 -155248063 -182584389 -183814852 #>  [379]  -36844393  -33571888  -29113866  -92029174 -216444130 -153769414 #>  [385]  -64552393  -90479081  -32272813  -31348188  -70748487    -934342 #>  [391]   -9570309  -40736224 -117085336  -74209946 -110608472   -4457959 #>  [397]  -22002902    -507299  -16227138  -32936437  -75548822 -131633547 #>  [403] -111921078  -81573377  -77540700 -160320218 -117016266 -133320316 #>  [409]  -31679548   -7242183  -34960913 -129245835 -153777201 -119600293 #>  [415] -122896963  -55609382  -63359095  -45579768  -70514471  -32969203 #>  [421]  -91260558  -41514164  -28829201  -71820807   -8019943  -47072628 #>  [427]  -46780316  -99324234  -17563020 -157180944  -11653304 -172514219 #>  [433]  -50968139  -52807744 -105104916  -30516378 -105750328  -34569648 #>  [439]  -44080952  -13378826  -72036639 -118507335  -36921319  -35732332 #>  [445]  -33393279 -131078616  -48634408   -4890449  -67840668  -17145878 #>  [451]  -52848310 -223741977  -45490715  -70196492  -56152975 -130581186 #>  [457] -167148917  -99518147  -88400637  -29340936 -131492065 -151561893 #>  [463] -199983817  -59664892  -80444832 -101768122  -89966927  -31581035 #>  [469]  -40013593 -130911350  -61211022 -100652475  -70385005  -49932658 #>  [475] -148823508 -115624966  -17270258  -92100031 -107074907  -69441858 #>  [481]  -31616725  -75013517  -19949081  -11367144  -51601883  -39279811 #>  [487]  -46233789  -56214744  -97709633  -32554352 -207731519  -33704939 #>  [493] -222909244  -93468277  -91624949  -99391474 -135243898  -70002351 #>  [499]  -86626576  -13374755  -51007290  -15105832  -35535631  -32846948 #>  [505] -227916240 -208051441 -133733487 -132795360  -51675020  -28994461 #>  [511] -200284563  -50887461  -74122661  -41321107  -53970989 -120081475 #>  [517] -164647583  -48198636  -22972532  -89553057  -42847356  -33357416 #>  [523]  -47422521  -21919351  -51131624 -153325594 -179220981  -45123770 #>  [529]  -19841408 -111303218  -55996371  -29777040  -47676246 -150782181 #>  [535]  -78820606  -99933702  -53569859  -59927160  -21960468 -149305910 #>  [541]  -55409405    -756175  -95610280  -54840803  -32809834  -10708677 #>  [547] -173978405  -96212279  -23492745  -11292423  -94806447  -40479776 #>  [553]  -69863007  -47208001  -54822087  -21581798 -133918175 -189463518 #>  [559]  -71239462  -15492166  -26325463 -125551344  -58358435  -22323334 #>  [565]  -28527013  -56796883  -65122238  -75713481   -2289725  -44444615 #>  [571]  -86057963  -67263273   -7584802  -73813052  -73931180 -112861197 #>  [577] -196366557  -11943406 -160974069  -40257656  -36607322  -51907612 #>  [583]  -27866680  -80376194  -81272053   -2651372  -15932606 -119994818 #>  [589] -158149737  -22034831  -39975064  -11281388  -40074772 -144043972 #>  [595]  -95655980  -13514519 -129473874 -132374504 -114710405  -27840926 #>  [601]  -64927984  -88781751  -41397900  -79632066  -32742904  -26213377 #>  [607] -166733216  -57496299  -70033894  -29885325 -118602363  -26688623 #>  [613]  -66499743  -39856148 -244538402  -38978676 -139236276 -144470791 #>  [619]  -11410733 -144557036  -71088936 -107032509 -145625476   -8359541 #>  [625]  -29267101  -49067140  -79789454  -31335308  -67789674  -50526670 #>  [631]  -25304275  -11415975  -63303692 -109517591  -93142416 -122321344 #>  [637]   -2767746  -70116806  -19041448  -32252966  -39408473  -16713612 #>  [643]  -38301664  -49768109  -80044031  -77414400  -97700179  -36438698 #>  [649]  -25365594 -111279342  -14153580  -62313471  -66546823 -122489800 #>  [655] -115387607  -74547434 -146085944  -39443285  -21857754  -58985384 #>  [661]  -19726707  -21915047 -147368803  -29213603 -146674857  -94727539 #>  [667]  -92297489  -21727734  -85291866  -43072675 -142531859  -37479778 #>  [673]  -78136555 -112332191  -75179847   -8367011  -21880209  -82443053 #>  [679]  -89141721 -105135116  -22298029 -118281781   -2259254  -19581601 #>  [685]  -84732774  -30964485 -158500336  -90608874  -55738587  -43892596 #>  [691] -113149159  -31654726   -4770682  -23330438  -23116383  -41003201 #>  [697]  -29297452 -125235823 -142233142  -92437000 -149121520 -101389766 #>  [703] -203239655  -53386094 -114514938   -9389124 -151867214  -45535737 #>  [709]  -56922379   -1520790  -81263268  -83739814  -94245747  -52734431 #>  [715]  -40516806  -70503042  -32096994 -140660672 -114900077  -85177105 #>  [721]  -52831526  -62224587  -75552401  -12995237  -31857650  -25082811 #>  [727] -149539777 -100519140  -29765418 -249144205  -70825245   -5082831 #>  [733]  -71407244  -11891612  -65820615  -31162977    -196738 -201966812 #>  [739]  -25218916  -40465342  -43343485  -48886022   -1107636  -30498398 #>  [745]   -7327830  -55182733 -248153569  -45021186  -36874022   -1205708 #>  [751]  -73656471  -40704468  -45140364  -30065837    -584441 -103472343 #>  [757]  -12993227  -38374557  -61986957  -47325601 -161952982   -7571938 #>  [763]  -80247922  -34146507  -95308745 -124490418 -122316634 -100011780 #>  [769] -228735770 -145492601  -19970854  -89066835 -156699884  -32592994 #>  [775]  -55762890  -55102917  -16634518  -77092786  -12407895  -55026196 #>  [781]  -45504688  -93544792   -3875548  -11753359 -133646992 -106351889 #>  [787]   -3194929  -54382247  -68888415  -50766573  -27030215 -102277496 #>  [793]  -35235281 -177229419  -26691378 -133195366  -42298769  -72306396 #>  [799]  -99205497   -2433482  -72039591  -96713905  -27068733  -31157983 #>  [805]  -35759431  -11314304 -101928441  -44527399  -57975928 -101805135 #>  [811] -108183519  -59998045 -197107878  -22548022  -18886731 -183331408 #>  [817]  -74075134  -81001440  -25299357  -41347351 -100795923  -49297286 #>  [823] -152126979 -100081381  -30046174 -147030607    -660337  -43084393 #>  [829] -106511937  -38409766 -184250451  -75133306 -139624624 -120305606 #>  [835] -126512388 -155017667  -64907087 -121974941  -30103885 -121986062 #>  [841] -110318481 -159614374 -192769701 -179405852 -103131609  -31191683 #>  [847]  -21752643 -144519825  -41086244  -87173497  -16413687  -56085783 #>  [853]   -4999933  -55680797   -3688140 -102176843  -83318984 -145372975 #>  [859] -106494135   -6693782  -45784167  -24411377 -156126145  -74424713 #>  [865] -146673130  -71787166 -103515981   -3728645  -58272352 -206698210 #>  [871]  -37154246  -27467501 -100068762  -49754517  -86740882 -109338861 #>  [877]  -27778950  -98680418 -112396384  -95918245  -44798777  -34084330 #>  [883]  -21751118  -15532319  -39378846  -20884802  -26573480  -30864238 #>  [889]  -42881776  -94873638     -47225  -62437745  -72700732  -49264000 #>  [895] -107449179  -83087381  -72114632  -27687116 -104973237  -18570942 #>  [901]  -36554476  -19690056  -56210102 -114691203  -86047558  -30651450 #>  [907] -108535752    -928257  -49581850  -50337321  -90644085  -77316233 #>  [913]  -73641085  -82466565  -64701943 -170140210  -30462766 -100551034 #>  [919]  -30178473   -6067037   -9928411  -55608429 -138137542  -69402902 #>  [925]  -25196528 -207507142  -11157029 -120025573  -31535410  -23673224 #>  [931]  -87354967  -22338213  -41925356  -89065324  -22634861 -157297428 #>  [937] -132269316  -19520895  -57570240  -43824008  -50402491 -104140093 #>  [943]  -20883146  -75581367 -238778547  -29706410  -47566590  -49840684 #>  [949] -116917840 -191857365  -40425969  -72416119  -31815830  -76481258 #>  [955]  -49397103  -17433942  -43290742 -124882361  -48231338  -35896290 #>  [961]  -33059284   -8428173 -120969303  -46188475   -8640864 -155255323 #>  [967]  -47134527  -56960419   -2517930  -10106673  -30467330   -4610073 #>  [973]  -82031576 -101874174 -119033140   -1247566 -128598439  -69512348 #>  [979] -141562660  -42889337  -33629119  -22844930  -46117312 -173472607 #>  [985]  -44609616  -29846028 -100537190 -142510271  -29420987  -41681580 #>  [991]  -37436018  -10163226 -158122928  -30349902 -100792472  -45915480 #>  [997]   -7876569  -85614197 -143781529  -86046444  # ------------------------------- # 1) Using a data.frame # -------------------------------  gene_length = rowData(se)$gene_length  df = assay(se)  ## Without log transformation df = tpm_normalization(df, gene_length = gene_length)  df[1:5, 1:5] #>                  SRR1039508  SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000266931    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000104774 7988.133038 9155.891497   7580.641   7027.455   6525.079 #> ENSG00000267583    0.000000    1.857346      0.000      0.000      0.000 #> ENSG00000227581    0.589507    0.000000      0.000      0.000      0.000  ## With log transformation df = tpm_normalization(df, gene_length = gene_length, log_trans = TRUE)  df[1:5, 1:5] #>                  SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166  0.00000000  0.0000000    0.00000    0.00000    0.00000 #> ENSG00000266931  0.00000000  0.0000000    0.00000    0.00000    0.00000 #> ENSG00000104774 10.47209331 10.6209113   10.57045   10.36653   10.23446 #> ENSG00000267583  0.00000000  0.1679188    0.00000    0.00000    0.00000 #> ENSG00000227581  0.02146413  0.0000000    0.00000    0.00000    0.00000  # ------------------------------- # 2) Using a SummarizedExperiment # -------------------------------  # If now new_assay_name is provided, then overwrites existing assay se2 = tpm_normalization(se, log_trans = FALSE)  head(assay(se2)) #>                  SRR1039508  SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000266931    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000104774 7988.133038 9155.891497   7580.641   7027.455   6525.079 #> ENSG00000267583    0.000000    1.857346      0.000      0.000      0.000 #> ENSG00000227581    0.589507    0.000000      0.000      0.000      0.000 #> ENSG00000227317    0.000000    0.000000      0.000      0.000      0.000 #>                   SRR1039517   SRR1039520 SRR1039521 #> ENSG00000260166    0.0000000    0.6380541      0.000 #> ENSG00000266931    0.0000000    0.0000000      0.000 #> ENSG00000104774 6742.8769431 7986.7194711   8515.681 #> ENSG00000267583    0.0000000    0.0000000      0.000 #> ENSG00000227581    0.8534855    0.0000000      0.000 #> ENSG00000227317    0.0000000    0.0000000      0.000  # If new new_assay_name, normalization stored in a new object se2 = tpm_normalization(se, log_trans = FALSE, new_assay_name = 'tpm_counts')  head(assay(se2, 'tpm_counts')) #>                  SRR1039508  SRR1039509 SRR1039512 SRR1039513 SRR1039516 #> ENSG00000260166    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000266931    0.000000    0.000000      0.000      0.000      0.000 #> ENSG00000104774 7988.133038 9155.891497   7580.641   7027.455   6525.079 #> ENSG00000267583    0.000000    1.857346      0.000      0.000      0.000 #> ENSG00000227581    0.589507    0.000000      0.000      0.000      0.000 #> ENSG00000227317    0.000000    0.000000      0.000      0.000      0.000 #>                   SRR1039517   SRR1039520 SRR1039521 #> ENSG00000260166    0.0000000    0.6380541      0.000 #> ENSG00000266931    0.0000000    0.0000000      0.000 #> ENSG00000104774 6742.8769431 7986.7194711   8515.681 #> ENSG00000267583    0.0000000    0.0000000      0.000 #> ENSG00000227581    0.8534855    0.0000000      0.000 #> ENSG00000227317    0.0000000    0.0000000      0.000  # A specific assay can also be selected new_matrix =  matrix(data = sample(x = seq(1, 100000),                                   size = nrow(se) * ncol(se),                                   replace = TRUE),                     nrow = nrow(se),                     ncol = ncol(se)) rownames(new_matrix) = rownames(se) colnames(new_matrix) = colnames(se)  ## Creating a new assay called new counts assay(se, 'new_counts') = new_matrix  se2 = tpm_normalization(se, new_assay_name = 'tpm_counts_new', assay_name = 'new_counts')  se2 #> class: RangedSummarizedExperiment  #> dim: 1000 8  #> metadata(1): '' #> assays(3): counts new_counts tpm_counts_new #> rownames(1000): ENSG00000260166 ENSG00000266931 ... ENSG00000160886 #>   ENSG00000142871 #> rowData names(11): gene_id gene_name ... symbol gene_length #> colnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521 #> colData names(9): SampleName cell ... Sample BioSample  head(assay(se2, 'tpm_counts_new')) #>                 SRR1039508 SRR1039509 SRR1039512 SRR1039513  SRR1039516 #> ENSG00000260166  214.47154 312.896401   237.0760   197.1483   99.113795 #> ENSG00000266931  212.74808 259.174457   231.0856   305.1729    9.696242 #> ENSG00000104774   17.86898 903.248951   212.9786  1316.4357 1958.447321 #> ENSG00000267583  181.17143 570.739601   386.1762   695.3827  197.296851 #> ENSG00000227581  232.13179  72.579986   269.7707   134.5134  298.122123 #> ENSG00000227317  640.04367   1.868172   745.9103   897.4473  353.031404 #>                 SRR1039517 SRR1039520 SRR1039521 #> ENSG00000260166  369.23341   65.85615   28.98194 #> ENSG00000266931   34.82144  255.41825   20.19892 #> ENSG00000104774  820.90084   81.28148  101.14455 #> ENSG00000267583  673.21176  550.05897   33.15431 #> ENSG00000227581  360.70760  145.05720  231.34687 #> ENSG00000227317 1034.72572  809.57394  246.51015"}]
